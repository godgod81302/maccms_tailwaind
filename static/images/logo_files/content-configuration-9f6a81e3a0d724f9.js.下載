(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[263],{89584:function(n,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/content-configuration",function(){return a(52338)}])},52338:function(n,s,a){"use strict";a.r(s);var t=a(85893),e=a(11151),p=a(72788),o=a(36336),c=a(30196);a(64637),a(88120);let l=p.L,i=o.X_;function r(n){let s=Object.assign({p:"p",code:"code",hr:"hr",a:"a",ul:"ul",li:"li",em:"em",pre:"pre"},(0,e.ah)(),n.components),{Editor:a,Heading:p}=s;return a||d("Editor",!0),p||d("Heading",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"tailwind.config.js"})," 文件的 ",(0,t.jsx)(s.code,{children:"content"})," 部分是你配置所有 HTML 模板、JavaScript 组件和任何其他包含 Tailwind 类名称的源文件的路径的地方。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5The ",(0,t.jsx)(s.code,{children:"content"})," section of your ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," file is where you configure the paths to all of your HTML templates, JavaScript components, and any other source files that contain Tailwind class names."]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'./pages/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'./components/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"本指南涵盖了确保 Tailwind 生成项目所需的所有 CSS 所需了解的一切。"}),"\n",(0,t.jsx)(s.p,{children:"\xa5This guide covers everything you need to know to make sure Tailwind generates all of the CSS needed for your project."}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)("a",{id:"configuring-source-paths"}),"\n",(0,t.jsx)(p,{level:2,id:"",children:"配置源路径"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Configuring source paths"}),"\n",(0,t.jsx)(s.p,{children:"Tailwind CSS 的工作原理是扫描所有 HTML、JavaScript 组件和任何其他模板文件中的类名，然后为这些样式生成所有相应的 CSS。"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Tailwind CSS works by scanning all of your HTML, JavaScript components, and any other template files for class names, then generating all of the corresponding CSS for those styles."}),"\n",(0,t.jsx)(s.p,{children:"为了让 Tailwind 生成你需要的所有 CSS，它需要了解项目中包含任何 Tailwind 类名称的每个文件。"}),"\n",(0,t.jsx)(s.p,{children:"\xa5In order for Tailwind to generate all of the CSS you need, it needs to know about every single file in your project that contains any Tailwind class names."}),"\n",(0,t.jsxs)(s.p,{children:["在配置文件的 ",(0,t.jsx)(s.code,{children:"content"})," 部分配置所有内容文件的路径："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5Configure the paths to all of your content files in the ",(0,t.jsx)(s.code,{children:"content"})," section of your configuration file:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'./pages/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'./components/**/*.{html,js}\'</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["路径配置为 ",(0,t.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Glob_(programming)",children:"通配符模式"}),"，可以轻松匹配项目中的所有内容文件，而无需进行大量配置："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5Paths are configured as ",(0,t.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Glob_(programming)",children:"glob patterns"}),", making it easy to match all of the content files in your project without a ton of configuration:"]}),"\n",(0,t.jsxs)(s.ul,{role:"list",children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["使用 ",(0,t.jsx)(s.code,{children:"*"})," 匹配除斜杠和隐藏文件以外的任何内容"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5Use ",(0,t.jsx)(s.code,{children:"*"})," to match anything except slashes and hidden files"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["使用 ",(0,t.jsx)(s.code,{children:"**"})," 匹配零个或多个目录"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5Use ",(0,t.jsx)(s.code,{children:"**"})," to match zero or more directories"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["在 ",(0,t.jsx)(s.code,{children:"{}"})," 之间使用逗号分隔值来匹配选项列表"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5Use comma separate values between ",(0,t.jsx)(s.code,{children:"{}"})," to match against a list of options"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Tailwind 在底层使用 ",(0,t.jsx)(s.a,{href:"https://github.com/mrmlnc/fast-glob",children:"fast-glob"})," 库 — 查看他们的文档以了解其他支持的模式功能。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5Tailwind uses the ",(0,t.jsx)(s.a,{href:"https://github.com/mrmlnc/fast-glob",children:"fast-glob"})," library under-the-hood — check out their documentation for other supported pattern features."]}),"\n",(0,t.jsxs)(s.p,{children:["路径是相对于你的项目根目录，而不是你的 ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," 文件，因此如果你的 ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," 文件位于自定义位置，你仍然应该编写相对于项目根目录的路径。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5Paths are relative to your project root, ",(0,t.jsx)(s.em,{children:"not"})," your ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," file, so if your ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," file is in a custom location, you should still write your paths relative to the root of your project."]}),"\n",(0,t.jsx)("a",{id:"pattern-recommendations"}),"\n",(0,t.jsx)(p,{level:3,id:"-1",children:"模式建议"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Pattern recommendations"}),"\n",(0,t.jsx)(s.p,{children:"为了获得最佳性能并避免误报，请尽可能具体地配置你的内容。"}),"\n",(0,t.jsx)(s.p,{children:"\xa5For the best performance and to avoid false positives, be as specific as possible with your content configuration."}),"\n",(0,t.jsxs)(s.p,{children:["如果你使用像这样的非常广泛的模式，Tailwind 甚至会扫描 ",(0,t.jsx)(s.code,{children:"node_modules"})," 以查找可能不是你想要的内容："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5If you use a really broad pattern like this one, Tailwind will even scan ",(0,t.jsx)(s.code,{children:"node_modules"})," for content which is probably not what you want:"]}),"\n",(0,t.jsx)(c.qm,{children:"不要使用非常广泛的模式"}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'./**/*.{html,js}\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["如果你有任何需要扫描的文件位于项目的根目录（通常是 ",(0,t.jsx)(s.code,{children:"index.html"})," 文件），请单独列出该文件，以便你的其他模式可以更具体："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5If you have any files you need to scan that are at the root of your project (often an ",(0,t.jsx)(s.code,{children:"index.html"})," file), list that file independently so your other patterns can be more specific:"]}),"\n",(0,t.jsx)(c.Vw,{children:"具体说明你的内容模式"}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'./components/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'./pages/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'./index.html\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["一些框架将它们的主要 HTML 入口点隐藏在与其余模板不同的位置（通常是 ",(0,t.jsx)(s.code,{children:"public/index.html"}),"），因此如果你要向该文件添加 Tailwind 类，请确保它也包含在你的配置中："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5Some frameworks hide their main HTML entry point in a different place than the rest of your templates (often ",(0,t.jsx)(s.code,{children:"public/index.html"}),"), so if you are adding Tailwind classes to that file make sure it’s included in your configuration as well:"]}),"\n",(0,t.jsx)(c.Vw,{children:"请记住包含你的 HTML 入口点（如果适用）"}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token block"><span class="token plain">module</span><span class="token punctuation">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">  </span><span class="token literal-property property">content</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">[</span><span class="token plain"></span>\n</span><span class="token block -mx-5 pl-4 pr-5 border-l-4 border-sky-400 bg-sky-300/[0.15]"><span class="token plain">    </span><span class="token string">\'./public/index.html\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">    </span><span class="token string">\'./src/**/*.{html,js}\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">  </span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">  </span><span class="token comment">// ...</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain"></span><span class="token punctuation">}</span>\n</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"如果你有任何 JavaScript 文件可以操纵你的 HTML 来添加类，请确保你也包含这些文件："}),"\n",(0,t.jsx)(s.p,{children:"\xa5If you have any JavaScript files that manipulate your HTML to add classes, make sure you include those as well:"}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// ...</span>\n    <span class="token string">\'./src/**/*.js\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(a,{filename:"src/spaghetti.js",code:'<pre class="language-js"><code class="language-js"><span class="token comment">// ...</span>\nmenuButton<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> classList <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">\'nav\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">classList</span>\n  classList<span class="token punctuation">.</span><span class="token method function property-access">toggle</span><span class="token punctuation">(</span><span class="token string">\'hidden\'</span><span class="token punctuation">)</span>\n  classList<span class="token punctuation">.</span><span class="token method function property-access">toggle</span><span class="token punctuation">(</span><span class="token string">\'block\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// ...</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"同样重要的是，不要扫描任何 CSS 文件 - 将 Tailwind 配置为扫描使用类名的模板，而不是 Tailwind 生成的 CSS 文件。"}),"\n",(0,t.jsxs)(s.p,{children:["\xa5It’s also important that you don’t scan any CSS files — configure Tailwind to scan your ",(0,t.jsx)(s.em,{children:"templates"})," where your class names are being used, never the CSS file that Tailwind is generating."]}),"\n",(0,t.jsx)(c.qm,{children:"切勿在内容配置中包含 CSS 文件"}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'./src/**/*.css\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)("a",{id:"class-detection-in-depth"}),"\n",(0,t.jsx)(p,{level:3,id:"-2",children:"类检测深入"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Class detection in-depth"}),"\n",(0,t.jsx)(s.p,{children:"Tailwind 扫描源代码中类的方式故意非常简单 - 我们实际上并不用编写的语言解析或执行任何代码，我们只是使用正则表达式来提取可能是类名的每个字符串。"}),"\n",(0,t.jsx)(s.p,{children:"\xa5The way Tailwind scans your source code for classes is intentionally very simple — we don’t actually parse or execute any of your code in the language it’s written in, we just use regular expressions to extract every string that could possibly be a class name."}),"\n",(0,t.jsx)(s.p,{children:"例如，下面是一些 HTML，其中每个潜在的类名字符串都单独高亮："}),"\n",(0,t.jsx)(s.p,{children:"\xa5For example, here’s some HTML with every potential class name string individually highlighted:"}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="code-highlight bg-code-highlight">div</span></span> <span class="token attr-name"><span class="code-highlight bg-code-highlight">class</span></span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">md:flex</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="code-highlight bg-code-highlight">div</span></span> <span class="token attr-name"><span class="code-highlight bg-code-highlight">class</span></span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">md:flex-shrink-0</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="code-highlight bg-code-highlight">img</span></span> <span class="token attr-name"><span class="code-highlight bg-code-highlight">class</span></span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">rounded-lg</span> <span class="code-highlight bg-code-highlight">md:w-56</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="code-highlight bg-code-highlight">src</span></span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">/img/shopping.jpg</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="code-highlight bg-code-highlight">alt</span></span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">Woman</span> <span class="code-highlight bg-code-highlight">paying</span> <span class="code-highlight bg-code-highlight">for</span> <span class="code-highlight bg-code-highlight">a</span> <span class="code-highlight bg-code-highlight">purchase</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="code-highlight bg-code-highlight">div</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="code-highlight bg-code-highlight">div</span></span> <span class="token attr-name"><span class="code-highlight bg-code-highlight">class</span></span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">mt-4</span> <span class="code-highlight bg-code-highlight">md:mt-0</span> <span class="code-highlight bg-code-highlight">md:ml-6</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="code-highlight bg-code-highlight">div</span></span> <span class="token attr-name"><span class="code-highlight bg-code-highlight">class</span></span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">uppercase</span> <span class="code-highlight bg-code-highlight">tracking-wide</span> <span class="code-highlight bg-code-highlight">text-sm</span> <span class="code-highlight bg-code-highlight">text-indigo-600</span> <span class="code-highlight bg-code-highlight">font-bold</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="code-highlight bg-code-highlight">Marketing</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="code-highlight bg-code-highlight">div</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="code-highlight bg-code-highlight">a</span></span> <span class="token attr-name"><span class="code-highlight bg-code-highlight">href</span></span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">/get-started</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="code-highlight bg-code-highlight">class</span></span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">block</span> <span class="code-highlight bg-code-highlight">mt-1</span> <span class="code-highlight bg-code-highlight">text-lg</span> <span class="code-highlight bg-code-highlight">leading-tight</span> <span class="code-highlight bg-code-highlight">font-semibold</span> <span class="code-highlight bg-code-highlight">text-gray-900</span> <span class="code-highlight bg-code-highlight">hover:underline</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="code-highlight bg-code-highlight">Finding</span> <span class="code-highlight bg-code-highlight">customers</span> <span class="code-highlight bg-code-highlight">for</span> <span class="code-highlight bg-code-highlight">your</span> <span class="code-highlight bg-code-highlight">new</span> <span class="code-highlight bg-code-highlight">business</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="code-highlight bg-code-highlight">a</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="code-highlight bg-code-highlight">p</span></span> <span class="token attr-name"><span class="code-highlight bg-code-highlight">class</span></span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">mt-2</span> <span class="code-highlight bg-code-highlight">text-gray-600</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="code-highlight bg-code-highlight">Getting</span> <span class="code-highlight bg-code-highlight">a</span> <span class="code-highlight bg-code-highlight">new</span> <span class="code-highlight bg-code-highlight">business</span> <span class="code-highlight bg-code-highlight">off</span> <span class="code-highlight bg-code-highlight">the</span> <span class="code-highlight bg-code-highlight">ground</span> <span class="code-highlight bg-code-highlight">is</span> <span class="code-highlight bg-code-highlight">a</span> <span class="code-highlight bg-code-highlight">lot</span> <span class="code-highlight bg-code-highlight">of</span> <span class="code-highlight bg-code-highlight">hard</span> <span class="code-highlight bg-code-highlight">work.</span>\n      <span class="code-highlight bg-code-highlight">Here</span> <span class="code-highlight bg-code-highlight">are</span> <span class="code-highlight bg-code-highlight">five</span> <span class="code-highlight bg-code-highlight">ideas</span> <span class="code-highlight bg-code-highlight">you</span> <span class="code-highlight bg-code-highlight">can</span> <span class="code-highlight bg-code-highlight">use</span> <span class="code-highlight bg-code-highlight">to</span> <span class="code-highlight bg-code-highlight">find</span> <span class="code-highlight bg-code-highlight">your</span> <span class="code-highlight bg-code-highlight">first</span> <span class="code-highlight bg-code-highlight">customers.</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="code-highlight bg-code-highlight">p</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="code-highlight bg-code-highlight">div</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="code-highlight bg-code-highlight">div</span></span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["我们不仅仅将搜索限制为 ",(0,t.jsx)(s.code,{children:'class="..."'})," 属性，因为你可以在任何地方使用类，例如在某些用于切换菜单的 JavaScript 中："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5We don’t just limit our search to ",(0,t.jsx)(s.code,{children:'class="..."'})," attributes because you could be using classes anywhere, like in some JavaScript for toggling a menu:"]}),"\n",(0,t.jsx)(a,{filename:"spaghetti.js",code:'<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  menuButton<span class="token punctuation">.</span><span class="token method function property-access">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'click\'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> classList <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">getElementById</span><span class="token punctuation">(</span><span class="token string">\'nav\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">classList</span>\n    classList<span class="token punctuation">.</span><span class="token method function property-access">toggle</span><span class="token punctuation">(</span><span class="token string">\'<span class="code-highlight bg-code-highlight">hidden</span>\'</span><span class="token punctuation">)</span>\n    classList<span class="token punctuation">.</span><span class="token method function property-access">toggle</span><span class="token punctuation">(</span><span class="token string">\'<span class="code-highlight bg-code-highlight">block</span>\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"通过使用这种非常简单的方法，Tailwind 可以非常可靠地与任何编程语言一起工作，例如 JSX："}),"\n",(0,t.jsx)(s.p,{children:"\xa5By using this very simple approach, Tailwind works extremely reliably with any programming language, like JSX for example:"}),"\n",(0,t.jsx)(a,{filename:"Button.jsx",code:'<pre class="language-jsx"><code class="language-jsx"><span class="token keyword">const</span> sizes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">md</span><span class="token operator">:</span> <span class="token string">\'px-4 py-2 rounded-md text-base\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">lg</span><span class="token operator">:</span> <span class="token string">\'px-5 py-3 rounded-lg text-lg\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">indigo</span><span class="token operator">:</span> <span class="token string">\'bg-indigo-500 hover:bg-indigo-600 text-white\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">cyan</span><span class="token operator">:</span> <span class="token string">\'bg-cyan-600 hover:bg-cyan-700 text-white\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Button</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> color<span class="token punctuation">,</span> size<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> colorClasses <span class="token operator">=</span> colors<span class="token punctuation">[</span>color<span class="token punctuation">]</span>\n  <span class="token keyword">let</span> sizeClasses <span class="token operator">=</span> sizes<span class="token punctuation">[</span>size<span class="token punctuation">]</span>\n\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">font-bold </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sizeClasses<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>colorClasses<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)("a",{id:"dynamic-class-names"}),"\n",(0,t.jsx)(p,{level:3,id:"-3",children:"动态类名"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Dynamic class names"}),"\n",(0,t.jsx)(s.p,{children:"Tailwind 如何提取类名的最重要的含义是它只会找到在源文件中作为完整的不间断字符串存在的类。"}),"\n",(0,t.jsxs)(s.p,{children:["\xa5The most important implication of how Tailwind extracts class names is that it will only find classes that exist ",(0,t.jsx)(s.em,{children:"as complete unbroken strings"})," in your source files."]}),"\n",(0,t.jsx)(s.p,{children:"如果你使用字符串插值或将部分类名连接在一起，Tailwind 将找不到它们，因此不会生成相应的 CSS："}),"\n",(0,t.jsx)(s.p,{children:"\xa5If you use string interpolation or concatenate partial class names together, Tailwind will not find them and therefore will not generate the corresponding CSS:"}),"\n",(0,t.jsx)(c.qm,{children:"不要动态构造类名"}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-{{ error ? \'red\' : \'green\' }}-600<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["在上面的示例中，字符串 ",(0,t.jsx)(s.code,{children:"text-red-600"})," 和 ",(0,t.jsx)(s.code,{children:"text-green-600"})," 不存在，因此 Tailwind 不会生成这些类。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5In the example above, the strings ",(0,t.jsx)(s.code,{children:"text-red-600"})," and ",(0,t.jsx)(s.code,{children:"text-green-600"})," do not exist, so Tailwind will not generate those classes."]}),"\n",(0,t.jsx)(s.p,{children:"相反，请确保你使用的所有类名都完整存在："}),"\n",(0,t.jsx)(s.p,{children:"\xa5Instead, make sure any class names you’re using exist in full:"}),"\n",(0,t.jsx)(c.Vw,{children:"始终使用完整的类名"}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ error ? \'text-red-600\' : \'text-green-600\' }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"如果你正在使用像 React 或 Vue 这样的组件库，这意味着你不应该使用 props 来动态构造类："}),"\n",(0,t.jsx)(s.p,{children:"\xa5If you’re using a component library like React or Vue, this means you shouldn’t use props to dynamically construct classes:"}),"\n",(0,t.jsx)(c.qm,{children:"不要使用 props 动态构建类名"}),"\n",(0,t.jsx)(s.pre,{className:"language-jsx",dangerouslySetInnerHTML:{__html:'<code class="language-jsx"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Button</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> color<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">bg-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-600 hover:bg-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-500 ...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"相反，将 props 映射到在构建时可静态检测的完整类名："}),"\n",(0,t.jsx)(s.p,{children:"\xa5Instead, map props to complete class names that are statically detectable at build-time:"}),"\n",(0,t.jsx)(c.Vw,{children:"始终将 props 映射到静态类名"}),"\n",(0,t.jsx)(s.pre,{className:"language-jsx",dangerouslySetInnerHTML:{__html:'<code class="language-jsx"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Button</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> color<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> colorVariants <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">blue</span><span class="token operator">:</span> <span class="token string">\'bg-blue-600 hover:bg-blue-500\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">red</span><span class="token operator">:</span> <span class="token string">\'bg-red-600 hover:bg-red-500\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>colorVariants<span class="token punctuation">[</span>color<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"这有一个额外的好处，可以让你将不同的属性值映射到不同的颜色阴影，例如："}),"\n",(0,t.jsx)(s.p,{children:"\xa5This has the added benefit of letting you map different prop values to different color shades for example:"}),"\n",(0,t.jsx)(s.pre,{className:"language-jsx",dangerouslySetInnerHTML:{__html:'<code class="language-jsx"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Button</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> color<span class="token punctuation">,</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> colorVariants <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">blue</span><span class="token operator">:</span> <span class="token string">\'bg-blue-600 hover:bg-blue-500 text-white\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">red</span><span class="token operator">:</span> <span class="token string">\'bg-red-500 hover:bg-red-400 text-white\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">yellow</span><span class="token operator">:</span> <span class="token string">\'bg-yellow-300 hover:bg-yellow-400 text-black\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>colorVariants<span class="token punctuation">[</span>color<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"只要你始终在代码中使用完整的类名，Tailwind 每次都会完美地生成所有 CSS。"}),"\n",(0,t.jsx)(s.p,{children:"\xa5As long as you always use complete class names in your code, Tailwind will generate all of your CSS perfectly every time."}),"\n",(0,t.jsx)("a",{id:"working-with-third-party-libraries"}),"\n",(0,t.jsx)(p,{level:3,id:"-4",children:"使用第三方库"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Working with third-party libraries"}),"\n",(0,t.jsxs)(s.p,{children:["如果你正在使用任何第三方库（例如 ",(0,t.jsx)(s.a,{href:"https://select2.org/",children:"Select2"}),"）并使用你自己的自定义 CSS 为该库设置样式，我们建议你在编写这些样式时不要使用 Tailwind 的 ",(0,t.jsx)(s.code,{children:"@layer"})," 功能："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5If you’re working with any third-party libraries (for example ",(0,t.jsx)(s.a,{href:"https://select2.org/",children:"Select2"}),") and styling that library with your own custom CSS, we recommend writing those styles ",(0,t.jsx)(s.em,{children:"without"})," using Tailwind’s ",(0,t.jsx)(s.code,{children:"@layer"})," feature:"]}),"\n",(0,t.jsx)(a,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n\n<span class="token selector"><span class="token class">.select2-dropdown</span></span> <span class="token punctuation">{</span>\n  <span class="token atrule atapply"><span class="token rule">@apply</span> rounded-b-lg shadow-md<span class="token punctuation">;</span></span>\n<span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">.select2-search</span></span> <span class="token punctuation">{</span>\n  <span class="token atrule atapply"><span class="token rule">@apply</span> border border-gray-300 rounded<span class="token punctuation">;</span></span>\n<span class="token punctuation">}</span>\n<span class="token selector"><span class="token class">.select2-results__group</span></span> <span class="token punctuation">{</span>\n  <span class="token atrule atapply"><span class="token rule">@apply</span> text-lg font-bold text-gray-900<span class="token punctuation">;</span></span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* ... */</span>\n\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"这将确保 Tailwind 始终在你的 CSS 中包含这些样式，这比配置 Tailwind 扫描第三方库的源代码要容易得多。"}),"\n",(0,t.jsxs)(s.p,{children:["\xa5This will ensure that Tailwind ",(0,t.jsx)(s.em,{children:"always"})," includes those styles in your CSS, which is a lot easier than configuring Tailwind to scan the source code of a third-party library."]}),"\n",(0,t.jsx)(s.p,{children:"如果你已经创建了自己的使用 Tailwind 设置样式的可重用组件集，并将它们导入多个项目，请确保配置 Tailwind 以扫描这些组件的类名："}),"\n",(0,t.jsx)(s.p,{children:"\xa5If you’ve created your own reusable set of components that are styled with Tailwind and are importing them in multiple projects, make sure to configure Tailwind to scan those components for class names:"}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token block"><span class="token plain">module</span><span class="token punctuation">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">  </span><span class="token literal-property property">content</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">[</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">    </span><span class="token string">\'./components/**/*.{html,js}\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">    </span><span class="token string">\'./pages/**/*.{html,js}\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token block -mx-5 pl-4 pr-5 border-l-4 border-sky-400 bg-sky-300/[0.15]"><span class="token plain">    </span><span class="token string">\'./node_modules/@my-company/tailwind-components/**/*.js\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">  </span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">  </span><span class="token comment">// ...</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain"></span><span class="token punctuation">}</span>\n</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"这将确保 Tailwind 也生成这些组件所需的所有 CSS。"}),"\n",(0,t.jsx)(s.p,{children:"\xa5This will make sure Tailwind generates all of the CSS needed for those components as well."}),"\n",(0,t.jsxs)(s.p,{children:["如果你在带有工作区的单一仓库中工作，你可能需要使用 ",(0,t.jsx)(s.code,{children:"require.resolve"})," 来确保 Tailwind 可以看到你的内容文件："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5If you’re working in a monorepo with workspaces, you may need to use ",(0,t.jsx)(s.code,{children:"require.resolve"})," to make sure Tailwind can see your content files:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token block"><span class="token keyword">const</span><span class="token plain"> path </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token plain"></span>\n</span><span class="token plain block">\n</span><span class="token block"><span class="token plain">module</span><span class="token punctuation">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">  </span><span class="token literal-property property">content</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">[</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">    </span><span class="token string">\'./components/**/*.{html,js}\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">    </span><span class="token string">\'./pages/**/*.{html,js}\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token block -mx-5 pl-4 pr-5 border-l-4 border-sky-400 bg-sky-300/[0.15]"><span class="token plain">    path</span><span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token plain">path</span><span class="token punctuation">.</span><span class="token method function property-access">dirname</span><span class="token punctuation">(</span><span class="token plain">require</span><span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span><span class="token string">\'@my-company/tailwind-components\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token plain"> </span><span class="token string">\'**/*.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">  </span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain">  </span><span class="token comment">// ...</span><span class="token plain"></span>\n</span><span class="token block"><span class="token plain"></span><span class="token punctuation">}</span>\n</span></code></pre>'}),"\n",(0,t.jsx)("a",{id:"using-relative-paths"}),"\n",(0,t.jsx)(p,{level:3,id:"-5",children:"使用相对路径"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Using relative paths"}),"\n",(0,t.jsxs)(s.p,{children:["默认情况下，Tailwind 解析相对于当前工作目录的非绝对内容路径，而不是 ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," 文件。如果你从其他目录运行 Tailwind，这可能会导致意外结果。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5By default Tailwind resolves non-absolute content paths relative to the current working directory, not the ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," file. This can lead to unexpected results if you run Tailwind from a different directory."]}),"\n",(0,t.jsxs)(s.p,{children:["要始终解析相对于 ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," 文件的路径，请使用 ",(0,t.jsx)(s.code,{children:"content"})," 配置的对象表示法并将 ",(0,t.jsx)(s.code,{children:"relative"})," 属性设置为 ",(0,t.jsx)(s.code,{children:"true"}),"："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5To always resolve paths relative to the ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," file, use the object notation for your ",(0,t.jsx)(s.code,{children:"content"})," configuration and set the ",(0,t.jsx)(s.code,{children:"relative"})," property to ",(0,t.jsx)(s.code,{children:"true"}),":"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-diff-js"><code class="language-diff-js"><span class="token language-js unchanged"><span class="token plain">module</span><span class="token punctuation">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">  </span><span class="token literal-property property">content</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token plain"></span>\n</span><span class="token language-js inserted"><span class="token plain">    </span><span class="token literal-property property">relative</span><span class="token operator">:</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">    </span><span class="token literal-property property">files</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">[</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">      </span><span class="token string">\'./pages/**/*.{html,js}\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">      </span><span class="token string">\'./components/**/*.{html,js}\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">    </span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">  </span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">  </span><span class="token comment">// ...</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain"></span><span class="token punctuation">}</span>\n</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"这可能会成为框架下一个主要版本的默认行为。"}),"\n",(0,t.jsx)(s.p,{children:"\xa5This will likely become the default behavior in the next major version of the framework."}),"\n",(0,t.jsx)("a",{id:"configuring-raw-content"}),"\n",(0,t.jsx)(p,{level:3,id:"-6",children:"配置原始内容"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Configuring raw content"}),"\n",(0,t.jsxs)(s.p,{children:["如果出于某种原因你需要配置 Tailwind 以扫描一些原始内容而不是文件内容，请使用带有 ",(0,t.jsx)(s.code,{children:"raw"})," 键的对象而不是路径："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5If for whatever reason you need to configure Tailwind to scan some raw content rather than the contents of a file, use an object with a ",(0,t.jsx)(s.code,{children:"raw"})," key instead of a path:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'./pages/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'./components/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">raw</span><span class="token operator">:</span> <span class="token string">\'&lt;div class="font-bold">\'</span><span class="token punctuation">,</span> <span class="token literal-property property">extension</span><span class="token operator">:</span> <span class="token string">\'html\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["对此没有太多有效的用例 - ",(0,t.jsx)(s.a,{href:"#safelisting-classes",children:"safelisting"})," 通常才是你真正想要的。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5There aren’t many valid use-cases for this — ",(0,t.jsx)(s.a,{href:"#safelisting-classes",children:"safelisting"})," is usually what you really want instead."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)("a",{id:"safelisting-classes"}),"\n",(0,t.jsx)(p,{level:2,id:"-7",children:"安全列表类"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Safelisting classes"}),"\n",(0,t.jsxs)(s.p,{children:["为了最小的文件大小和最佳的开发体验，我们强烈建议依靠你的 ",(0,t.jsx)(s.code,{children:"content"})," 配置来告诉 Tailwind 尽可能多地生成哪些类。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5For the smallest file size and best development experience, we highly recommend relying on your ",(0,t.jsx)(s.code,{children:"content"})," configuration to tell Tailwind which classes to generate as much as possible."]}),"\n",(0,t.jsx)(s.p,{children:"安全列表是最后的手段，只应在无法扫描某些内容以查找类名的情况下使用。这些情况很少见，你几乎不需要此功能。"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Safelisting is a last-resort, and should only be used in situations where it’s impossible to scan certain content for class names. These situations are rare, and you should almost never need this feature."}),"\n",(0,t.jsxs)(s.p,{children:["如果你需要确保 Tailwind 生成内容文件中不存在的某些类名，请使用 ",(0,t.jsx)(s.code,{children:"safelist"})," 选项："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5If you need to make sure Tailwind generates certain class names that don’t exist in your content files, use the ",(0,t.jsx)(s.code,{children:"safelist"})," option:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'./pages/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'./components/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">safelist</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'bg-red-500\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'text-3xl\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'lg:text-4xl\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"这可能有用的一个示例是，如果你的站点显示用户生成的内容，并且你希望用户能够在其内容中使用一组受限的 Tailwind 类，而这些类可能不存在于你自己站点的源文件中。"}),"\n",(0,t.jsx)(s.p,{children:"\xa5One example of where this can be useful is if your site displays user-generated content and you want users to be able to use a constrained set of Tailwind classes in their content that might not exist in your own site’s source files."}),"\n",(0,t.jsx)("a",{id:"using-regular-expressions"}),"\n",(0,t.jsx)(p,{level:3,id:"-8",children:"使用正则表达式"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Using regular expressions"}),"\n",(0,t.jsx)(s.p,{children:"Tailwind 支持基于模式的安全列表，适用于需要将大量类列入安全列表的情况："}),"\n",(0,t.jsx)(s.p,{children:"\xa5Tailwind supports pattern-based safelisting for situations where you need to safelist a lot of classes:"}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'./pages/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'./components/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">safelist</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'text-2xl\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'text-3xl\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">bg-<span class="token group punctuation">(</span>red<span class="token alternation keyword">|</span>green<span class="token alternation keyword">|</span>blue<span class="token group punctuation">)</span>-<span class="token group punctuation">(</span>100<span class="token alternation keyword">|</span>200<span class="token alternation keyword">|</span>300<span class="token group punctuation">)</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["模式只能匹配基本工具名称，如 ",(0,t.jsx)(s.code,{children:"/bg-red-.+/"}),"，如果模式包含变体修饰符，如 ",(0,t.jsx)(s.code,{children:"/hover:bg-red-.+/"}),"，则不会匹配。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5Patterns can only match against base utility names like ",(0,t.jsx)(s.code,{children:"/bg-red-.+/"}),", and won’t match if the pattern includes a variant modifier like ",(0,t.jsx)(s.code,{children:"/hover:bg-red-.+/"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["如果你想强制 Tailwind 为任何匹配的类生成变体，请使用 ",(0,t.jsx)(s.code,{children:"variants"})," 选项包含它们："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5If you want to force Tailwind to generate variants for any matched classes, include them using the ",(0,t.jsx)(s.code,{children:"variants"})," option:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'./pages/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'./components/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">safelist</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'text-2xl\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'text-3xl\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">bg-<span class="token group punctuation">(</span>red<span class="token alternation keyword">|</span>green<span class="token alternation keyword">|</span>blue<span class="token group punctuation">)</span>-<span class="token group punctuation">(</span>100<span class="token alternation keyword">|</span>200<span class="token alternation keyword">|</span>300<span class="token group punctuation">)</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      <span class="token literal-property property">variants</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'lg\'</span><span class="token punctuation">,</span> <span class="token string">\'hover\'</span><span class="token punctuation">,</span> <span class="token string">\'focus\'</span><span class="token punctuation">,</span> <span class="token string">\'lg:hover\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)("a",{id:"discarding-classes"}),"\n",(0,t.jsx)(p,{level:3,id:"-9",children:"丢弃类"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Discarding classes"}),"\n",(0,t.jsx)(s.p,{children:"由于 Tailwind 使用一种非常简单的方法来检测内容中的类名，你可能会发现生成了一些你实际上并不需要的类。"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Since Tailwind uses a very simple approach to detecting class names in your content, you may find that some classes are being generated that you don’t actually need."}),"\n",(0,t.jsxs)(s.p,{children:["例如，此 HTML 仍会生成 ",(0,t.jsx)(s.code,{children:"container"})," 类，即使该类实际上并未被使用："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5For example, this HTML would still generate the ",(0,t.jsx)(s.code,{children:"container"})," class, even though that class is not actually being used:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-lg leading-8 text-gray-600<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  Every custom pool we design starts as a used shipping <span class="code-highlight bg-code-highlight">container</span>, and is\n  retrofitted with state of the art technology and finishes to turn it into\n  a beautiful and functional way to entertain your guests all summer long.\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"当某些类与某些现有 CSS 冲突时，你可能还想阻止 Tailwind 生成这些类，但你不想走得更远以至于为所有 Tailwind 类添加前缀。"}),"\n",(0,t.jsx)(s.p,{children:"\xa5You may also want to prevent Tailwind from generating certain classes when those classes would conflict with some existing CSS, but you don’t want to go so far as to prefix all of your Tailwind classes."}),"\n",(0,t.jsxs)(s.p,{children:["在这些情况下，你可以使用 ",(0,t.jsx)(s.code,{children:"blocklist"})," 选项告诉 Tailwind 忽略它在你的内容中检测到的特定类："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5In these situations, you can use the ",(0,t.jsx)(s.code,{children:"blocklist"})," option to tell Tailwind to ignore specific classes that it detects in your content:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'./pages/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'./components/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">blocklist</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">\'container\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'collapse\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"blocklist"})," 选项仅影响将由 Tailwind 生成的 CSS，而不影响你自己创作或从其他库导入的自定义 CSS。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5The ",(0,t.jsx)(s.code,{children:"blocklist"})," option only affects CSS that would be generated by Tailwind, not custom CSS you’ve authored yourself or are importing from another library."]}),"\n",(0,t.jsxs)(s.p,{children:["与 ",(0,t.jsx)(s.code,{children:"safelist"})," 不同，",(0,t.jsx)(s.code,{children:"blocklist"})," 选项仅支持字符串，你不能使用正则表达式来阻止类。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5Unlike ",(0,t.jsx)(s.code,{children:"safelist"}),", the ",(0,t.jsx)(s.code,{children:"blocklist"})," option only supports strings, and you cannot block classes using regular expressions."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)("a",{id:"transforming-source-files"}),"\n",(0,t.jsx)(p,{level:2,id:"-10",children:"转换源文件"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Transforming source files"}),"\n",(0,t.jsx)(s.p,{children:"如果你以可编译为 HTML 的格式（如 Markdown）创作内容，那么在扫描内容以查找类名之前将该内容编译为 HTML 通常是有意义的。"}),"\n",(0,t.jsxs)(s.p,{children:["\xa5If you’re authoring content in a format that ",(0,t.jsx)(s.em,{children:"compiles"})," to HTML (like Markdown), it often makes sense to compile that content to HTML ",(0,t.jsx)(s.em,{children:"before"})," scanning it for class names."]}),"\n",(0,t.jsxs)(s.p,{children:["在提取类之前，使用 ",(0,t.jsx)(s.code,{children:"content.transform"})," 选项转换与特定文件扩展名匹配的任何内容："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5Use the ",(0,t.jsx)(s.code,{children:"content.transform"})," option to transform any content matching a specific file extension before extracting classes:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> remark <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'remark\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./src/**/*.{html,md}\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">md</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> <span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">process</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["使用 ",(0,t.jsx)(s.code,{children:"content.transform"})," 时，你需要使用 ",(0,t.jsx)(s.code,{children:"content.files"})," 提供源路径，而不是作为 ",(0,t.jsx)(s.code,{children:"content"})," 下的顶层数组。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5When using ",(0,t.jsx)(s.code,{children:"content.transform"}),", you’ll need to provide your source paths using ",(0,t.jsx)(s.code,{children:"content.files"})," instead of as a top-level array under ",(0,t.jsx)(s.code,{children:"content"}),"."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)("a",{id:"customizing-extraction-logic"}),"\n",(0,t.jsx)(p,{level:2,id:"-11",children:"自定义提取逻辑"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Customizing extraction logic"}),"\n",(0,t.jsxs)(s.p,{children:["使用 ",(0,t.jsx)(s.code,{children:"extract"})," 选项覆盖 Tailwind 用于检测特定文件扩展名的类名的逻辑："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5Use the ",(0,t.jsx)(s.code,{children:"extract"})," option to override the logic Tailwind uses to detect class names for specific file extensions:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./src/**/*.{html,wtf}\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">extract</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">wtf</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword control-flow">return</span> content<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-class-negation operator">^</span>&lt;>"\'`<span class="token char-set class-name">\\s</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">*</span></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"这是一项高级功能，大多数用户不需要它 - Tailwind 中的默认提取逻辑几乎适用于所有项目。"}),"\n",(0,t.jsx)(s.p,{children:"\xa5This is an advanced feature and most users won’t need it — the default extraction logic in Tailwind works extremely well for almost all projects."}),"\n",(0,t.jsxs)(s.p,{children:["与转换一样，使用 ",(0,t.jsx)(s.code,{children:"content.extract"})," 时，你需要使用 ",(0,t.jsx)(s.code,{children:"content.files"})," 提供源路径，而不是作为 ",(0,t.jsx)(s.code,{children:"content"})," 下的顶层数组。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5As with transforming, when using ",(0,t.jsx)(s.code,{children:"content.extract"}),", you’ll need to provide your source paths using ",(0,t.jsx)(s.code,{children:"content.files"})," instead of as a top-level array under ",(0,t.jsx)(s.code,{children:"content"}),"."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)("a",{id:"troubleshooting"}),"\n",(0,t.jsx)(p,{level:2,id:"-12",children:"故障排除"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Troubleshooting"}),"\n",(0,t.jsx)("a",{id:"classes-arent-generated"}),"\n",(0,t.jsx)(p,{level:3,id:"-13",children:"不生成类"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Classes aren’t generated"}),"\n",(0,t.jsxs)(s.p,{children:["如果 Tailwind 没有生成类，请确保你的 ",(0,t.jsx)(s.code,{children:"content"})," 配置正确并且匹配所有正确的源文件。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5If Tailwind isn’t generating classes, make sure your ",(0,t.jsx)(s.code,{children:"content"})," configuration is correct and matches all of the right source files."]}),"\n",(0,t.jsxs)(s.p,{children:["一个常见的错误是缺少文件扩展名，例如，如果你为 React 组件使用 ",(0,t.jsx)(s.code,{children:"jsx"})," 而不是 ",(0,t.jsx)(s.code,{children:"js"}),"："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5A common mistake is missing a file extension, for example if you’re using ",(0,t.jsx)(s.code,{children:"jsx"})," instead of ",(0,t.jsx)(s.code,{children:"js"})," for your React components:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-diff-js"><code class="language-diff-js"><span class="token language-js unchanged"><span class="token plain">module</span><span class="token punctuation">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">  </span><span class="token literal-property property">content</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">[</span><span class="token plain"></span>\n</span><span class="token language-js deleted"><span class="token plain">    </span><span class="token string">\'./src/**/*.{html,js}\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js inserted"><span class="token plain">    </span><span class="token string">\'./src/**/*.{html,js,jsx}\'</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">  </span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">  </span><span class="token comment">// ...</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain"></span><span class="token punctuation">}</span>\n</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"或者创建一个最初未涵盖的新文件夹中间项目并忘记将其添加到你的配置中："}),"\n",(0,t.jsx)(s.p,{children:"\xa5Or creating a new folder mid-project that wasn’t covered originally and forgetting to add it to your configuration:"}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-diff-js"><code class="language-diff-js"><span class="token language-js unchanged"><span class="token plain">module</span><span class="token punctuation">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">  </span><span class="token literal-property property">content</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">[</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">    </span><span class="token string">\'./pages/**/*.{html,js}\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">    </span><span class="token string">\'./components/**/*.{html,js}\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js inserted"><span class="token plain">    </span><span class="token string">\'./util/**/*.{html,js}\'</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">  </span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">  </span><span class="token comment">// ...</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain"></span><span class="token punctuation">}</span>\n</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"也可能是你正在尝试使用动态类名，这不会起作用，因为 Tailwind 实际上不会评估你的源代码，只能检测静态的完整类字符串。"}),"\n",(0,t.jsx)(s.p,{children:"\xa5It could also be that you are trying to use dynamic class names, which won’t work because Tailwind doesn’t actually evaluate your source code and can only detect static unbroken class strings."}),"\n",(0,t.jsx)(c.qm,{children:"不要动态构造类名"}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-{{ error ? \'red\' : \'green\' }}-600<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"确保在代码中始终使用完整的类名："}),"\n",(0,t.jsx)(s.p,{children:"\xa5Make sure you always use complete class names in your code:"}),"\n",(0,t.jsx)(c.Vw,{children:"始终使用完整的类名"}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ error ? \'text-red-600\' : \'text-green-600\' }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["阅读我们关于 ",(0,t.jsx)(s.a,{href:"#dynamic-class-names",children:"动态类名"})," 的文档了解更多详情。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5Read our documentation on ",(0,t.jsx)(s.a,{href:"#dynamic-class-names",children:"dynamic class names"})," for more details."]}),"\n",(0,t.jsx)("a",{id:"styles-rebuild-in-an-infinite-loop"}),"\n",(0,t.jsx)(p,{level:3,id:"-14",children:"样式在无限循环中重建"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Styles rebuild in an infinite loop"}),"\n",(0,t.jsxs)(s.p,{children:["如果你的 CSS 似乎在无限循环中重新构建，那很有可能是因为你的构建工具在 ",(0,t.jsx)(s.a,{href:"https://github.com/postcss/postcss/blob/main/docs/guidelines/runner.md#31-rebuild-when-dependencies-change",children:"注册 PostCSS 依赖"})," 时不支持 ",(0,t.jsx)(s.code,{children:"glob"})," 选项。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5If your CSS seems to be rebuilding in an infinite loop, there’s a good chance it’s because your build tool doesn’t support the ",(0,t.jsx)(s.code,{children:"glob"})," option when ",(0,t.jsx)(s.a,{href:"https://github.com/postcss/postcss/blob/main/docs/guidelines/runner.md#31-rebuild-when-dependencies-change",children:"registering PostCSS dependencies"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["许多构建工具（例如 webpack）不支持此选项，因此我们只能告诉他们监视特定文件或整个目录。例如，我们不能告诉 webpack 只查看目录中的 ",(0,t.jsx)(s.code,{children:"*.html"})," 个文件。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5Many build tools (such as webpack) don’t support this option, and as a result we can only tell them to watch specific files or ",(0,t.jsx)(s.em,{children:"entire directories"}),". We can’t tell webpack to ",(0,t.jsx)(s.em,{children:"only"})," watch ",(0,t.jsx)(s.code,{children:"*.html"})," files in a directory for example."]}),"\n",(0,t.jsx)(s.p,{children:"这意味着如果构建 CSS 导致这些目录中的任何文件发生更改，将触发重建，即使更改的文件与 glob 中的扩展名不匹配。"}),"\n",(0,t.jsxs)(s.p,{children:["\xa5That means that if building your CSS causes ",(0,t.jsx)(s.em,{children:"any"})," files in those directories to change, a rebuild will be triggered, even if the changed file doesn’t match the extension in your glob."]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// With some build tools, your CSS will rebuild</span>\n    <span class="token comment">// any time *any* file in `src` changes.</span>\n    <span class="token string">\'./src/**/*.{html,js}\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["因此，如果你正在观察 ",(0,t.jsx)(s.code,{children:"src/**/*.html"})," 的变化，但你正在将 CSS 输出文件写入 ",(0,t.jsx)(s.code,{children:"src/css/styles.css"}),"，你将使用某些工具获得无限重建循环。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5So if you are watching ",(0,t.jsx)(s.code,{children:"src/**/*.html"})," for changes, but you are writing your CSS output file to ",(0,t.jsx)(s.code,{children:"src/css/styles.css"}),", you will get an infinite rebuild loop using some tools."]}),"\n",(0,t.jsx)(s.p,{children:"理想情况下，我们可以在控制台中就此向你触发警告，但许多工具都非常好地支持它（包括我们自己的 CLI 工具），而且我们没有可靠的方法来检测你正在使用的构建工具。"}),"\n",(0,t.jsx)(s.p,{children:"\xa5Ideally we could warn you about this in the console, but many tools support it perfectly fine (including our own CLI tool), and we have no reliable way to detect what build tool you are using."}),"\n",(0,t.jsxs)(s.p,{children:["要解决此问题，请在 ",(0,t.jsx)(s.code,{children:"content"})," 配置中使用更具体的路径，确保仅包含在构建 CSS 时不会更改的目录："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5To solve this problem, use more specific paths in your ",(0,t.jsx)(s.code,{children:"content"})," config, making sure to only include directories that won’t change when your CSS builds:"]}),"\n",(0,t.jsx)(a,{filename:"tailwind.config.js",code:'<pre class="language-diff-js"><code class="language-diff-js"><span class="token language-js unchanged"><span class="token plain">module</span><span class="token punctuation">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">  </span><span class="token literal-property property">content</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">[</span><span class="token plain"></span>\n</span><span class="token language-js deleted"><span class="token plain">    </span><span class="token string">\'./src/**/*.{html,js}\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js inserted"><span class="token plain">    </span><span class="token string">\'./src/pages/**/*.{html,js}\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js inserted"><span class="token plain">    </span><span class="token string">\'./src/components/**/*.{html,js}\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js inserted"><span class="token plain">    </span><span class="token string">\'./src/layouts/**/*.{html,js}\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js inserted"><span class="token plain">    </span><span class="token string">\'./src/index.html\'</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">  </span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">  </span><span class="token comment">// ...</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain"></span><span class="token punctuation">}</span>\n</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"如有必要，请调整你的实际项目目录结构，以确保你可以以模板文件为目标，而不会意外捕获你的 CSS 文件或其他构建工件（如清单文件）。"}),"\n",(0,t.jsx)(s.p,{children:"\xa5If necessary, adjust your actual project directory structure to make sure you can target your template files without accidentally catching your CSS file or other build artifacts like manifest files."}),"\n",(0,t.jsxs)(s.p,{children:["如果你绝对不能更改你的内容配置或目录结构，那么最好的办法是使用具有完整 glob 支持的工具单独编译你的 CSS。我们建议使用 ",(0,t.jsx)(s.a,{href:"/docs/installation",children:"Tailwind CLI"}),"，这是一种快速、简单、专门构建的工具，用于使用 Tailwind 编译 CSS。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5If you absolutely can’t change your content config or directory structure, your best bet is to compile your CSS separately with a tool that has complete glob support. We recommend using ",(0,t.jsx)(s.a,{href:"/docs/installation",children:"Tailwind CLI"}),", which is a fast, simple, purpose-built tool for compiling your CSS with Tailwind."]}),"\n",(0,t.jsx)("a",{id:"it-just-isnt-working-properly"}),"\n",(0,t.jsx)(p,{level:3,id:"-15",children:"它只是不能正常工作"}),"\n",(0,t.jsx)(s.p,{children:"\xa5It just isn’t working properly"}),"\n",(0,t.jsxs)(s.p,{children:["如果你遇到奇怪的、难以描述的输出问题，或者事情看起来根本无法正常工作，这很可能是因为你的构建工具没有正确（或根本）不支持 PostCSS 依赖消息。目前已知的一个例子是 ",(0,t.jsx)(s.a,{href:"https://github.com/ionic-team/stencil-postcss/issues/38",children:"模版"}),"。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5If you are experiencing weird, hard to describe issues with the output, or things just don’t seem like they are working at all, there’s a good chance it’s due to your build tool not supporting PostCSS dependency messages properly ",(0,t.jsx)(s.em,{children:"(or at all)"}),". One known example of this currently is ",(0,t.jsx)(s.a,{href:"https://github.com/ionic-team/stencil-postcss/issues/38",children:"Stencil"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["当你遇到这类问题时，我们建议你使用 ",(0,t.jsx)(s.a,{href:"/docs/installation",children:"Tailwind CLI"})," 单独编译你的 CSS，而不是尝试将 Tailwind 集成到你现有的工具中。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5When you are having these sorts of issues, we recommend using ",(0,t.jsx)(s.a,{href:"/docs/installation",children:"Tailwind CLI"})," to compile your CSS separately instead of trying to integrate Tailwind into your existing tooling."]}),"\n",(0,t.jsxs)(s.p,{children:["你可以使用像 ",(0,t.jsx)(s.code,{children:"npm-run-all"})," 或 ",(0,t.jsx)(s.code,{children:"concurrently"})," 这样的包来编译你的 CSS 以及你通常的开发命令，方法是将一些脚本添加到你的项目中，如下所示："]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5You can use packages like ",(0,t.jsx)(s.code,{children:"npm-run-all"})," or ",(0,t.jsx)(s.code,{children:"concurrently"})," to compile your CSS alongside your usual development command by adding some scripts to your project like this:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-js",dangerouslySetInnerHTML:{__html:'<code class="language-js"><span class="token comment">// package.json</span>\n<span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token string">"concurrently \\"npm run start:css\\" \\"react-scripts start\\""</span><span class="token punctuation">,</span>\n    <span class="token string-property property">"start:css"</span><span class="token operator">:</span> <span class="token string">"tailwindcss -o src/tailwind.css --watch"</span><span class="token punctuation">,</span>\n    <span class="token string-property property">"build"</span><span class="token operator">:</span> <span class="token string">"npm run build:css &amp;&amp; react-scripts build"</span><span class="token punctuation">,</span>\n    <span class="token string-property property">"build:css"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production tailwindcss -o src/tailwind.css -m"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["无论哪种方式，请务必选择 ",(0,t.jsx)(s.a,{href:"https://github.com/tailwindlabs/tailwindcss/issues",children:"检查现有问题"})," 或 ",(0,t.jsx)(s.a,{href:"https://github.com/tailwindlabs/tailwindcss/issues/new/choose",children:"开一个新的"}),"，以便我们找出问题并尝试提高与你使用的任何工具的兼容性。"]}),"\n",(0,t.jsxs)(s.p,{children:["\xa5Either way, please be sure to ",(0,t.jsx)(s.a,{href:"https://github.com/tailwindlabs/tailwindcss/issues",children:"check for an existing issue"})," or ",(0,t.jsx)(s.a,{href:"https://github.com/tailwindlabs/tailwindcss/issues/new/choose",children:"open a new one"})," so we can figure out the problem and try to improve compatibility with whatever tool you are using."]})]})}function u(n={}){return(0,t.jsx)(i,Object.assign({},n,{children:(0,t.jsx)(r,n)}))}function d(n,s){throw Error("Expected "+(s?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}s.default=u,u.layoutProps={Layout:l,meta:{title:"内容配置",shortTitle:"内容",description:"为你的项目配置内容源。"},slug:"content-configuration",tableOfContents:[{title:"配置源路径",slug:"",children:[{title:"模式建议",slug:"-1",children:[]},{title:"类检测深入",slug:"-2",children:[]},{title:"动态类名",slug:"-3",children:[]},{title:"使用第三方库",slug:"-4",children:[]},{title:"使用相对路径",slug:"-5",children:[]},{title:"配置原始内容",slug:"-6",children:[]}]},{title:"安全列表类",slug:"-7",children:[{title:"使用正则表达式",slug:"-8",children:[]},{title:"丢弃类",slug:"-9",children:[]}]},{title:"转换源文件",slug:"-10",children:[]},{title:"自定义提取逻辑",slug:"-11",children:[]},{title:"故障排除",slug:"-12",children:[{title:"不生成类",slug:"-13",children:[]},{title:"样式在无限循环中重建",slug:"-14",children:[]},{title:"它只是不能正常工作",slug:"-15",children:[]}]}]}},64637:function(n,s,a){"use strict";a.d(s,{E:function(){return u}});var t=a(85893),e=a(67294),p=a(49808),o=a(86010),c=a(4493);function l({className:n}){return(0,t.jsx)("div",{className:(0,o.Z)("pointer-events-none absolute inset-0",n)})}function i({children:n,selectedIndex:s,myIndex:a,marker:e}){let c=s===a,i={leading:c?null:s===a-1?"capped":"normal",trailing:c?null:s===a+1?"capped":"normal"};return(0,t.jsxs)(p.O,{className:(0,o.Z)("flex items-center relative z-10 overflow-hidden px-4 py-1 [&:not(:focus-visible)]:focus:outline-none",c?"text-sky-300":"text-slate-400"),children:[(0,t.jsx)("span",{className:"z-10",children:n}),"close"===e&&(0,t.jsx)("svg",{viewBox:"0 0 4 4",className:"ml-2.5 flex-none w-1 h-1 text-slate-500 overflow-visible",children:(0,t.jsx)("path",{d:"M-1 -1L5 5M5 -1L-1 5",fill:"none",stroke:"currentColor",strokeLinecap:"round"})}),"modified"===e&&(0,t.jsx)("div",{className:"ml-2.5 flex-none w-1 h-1 rounded-full bg-current"}),!c&&(0,t.jsx)(l,{className:(0,o.Z)("bg-slate-700/50 border-y border-slate-500/30","capped"===i.leading&&"border-l rounded-tl","capped"===i.trailing&&"border-r rounded-tr")}),"normal"===i.trailing&&(0,t.jsx)(l,{className:"inset-y-px border-r border-slate-200/5 z-20"}),c&&(0,t.jsx)(l,{className:"border-b border-b-sky-300"})]})}let r={plain:({children:n})=>(0,t.jsx)("div",{className:"not-prose bg-slate-800 rounded-xl shadow-md",children:n}),framed:({children:n,...s})=>(0,t.jsx)(c.RQ,{...s,children:(0,t.jsx)("div",{className:"not-prose bg-slate-800 rounded-tl-xl shadow-md",children:n})})};function u({children:n,style:s="plain",actions:a,...c}){let[l,u]=(0,e.useState)(0),d=r[s];return(0,t.jsx)(d,{...c,children:(0,t.jsxs)(p.O.Group,{as:"div",onChange:u,children:[(0,t.jsxs)("div",{className:"flex",children:[(0,t.jsx)(p.O.List,{className:"flex text-slate-400 text-xs leading-6 overflow-hidden rounded-tl-xl pt-2",children:n.map((n,s)=>(0,t.jsx)(i,{myIndex:s,selectedIndex:l,children:n.props.filename},n.props.filename))}),(0,t.jsx)("div",{className:"flex-auto flex pt-2 rounded-tr-xl overflow-hidden",children:(0,t.jsx)("div",{className:(0,o.Z)("flex-auto flex justify-end bg-slate-700/50 border-y border-slate-500/30 pr-4",l===n.length-1?"rounded-tl border-l":"")})}),a?(0,t.jsx)("div",{className:"absolute top-2 right-4 h-8 flex",children:a({selectedIndex:l})}):null]}),(0,t.jsx)(p.O.Panels,{className:"flex overflow-auto",children:n.map(n=>(0,t.jsx)(p.O.Panel,{className:"flex-none min-w-full p-5 text-sm leading-6 text-slate-50 ligatures-none",...n.props.code?{dangerouslySetInnerHTML:{__html:n.props.code}}:{children:n.props.children}},n.props.filename))})]})})}},88120:function(n,s,a){"use strict";a.d(s,{X:function(){return o}});var t=a(85893),e=a(865);let p={screens:"Your project's responsive breakpoints",colors:"Your project's color palette",spacing:"Your project's spacing scale",container:"Configuration for the `container` plugin",inset:"Values for the `top`, `right`, `bottom`, and `left` properties",keyframes:"Keyframe values used in the `animation` plugin",...Object.fromEntries(["placeholderColor","placeholderOpacity","rotate","scale","space","textOpacity","translate","backdropBlur","backdropBrightness","backdropContrast","backdropGrayscale","backdropHueRotate","backdropInvert","backdropOpacity","backdropSaturate","backdropSepia","blur","brightness","borderOpacity","borderWidth","boxShadowColor","contrast","divideColor","divideOpacity","divideWidth","dropShadow","fill","grayscale","hueRotate","invert","gradientColorStops","ringColor","ringOffsetColor","ringOffsetWidth","ringOpacity","ringWidth","rotate","saturate","scale","sepia","skew"].map(n=>[n,`Values for the \`${n}\` plugin`]))};function o(){return(0,t.jsx)("div",{className:"prose prose-slate dark:prose-dark",children:(0,t.jsxs)("table",{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"键"}),(0,t.jsx)("th",{children:"描述"})]})}),(0,t.jsx)("tbody",{children:Object.keys(e.Z.theme).map(n=>{var s;return(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)("code",{children:n})}),(0,t.jsx)("td",{children:(null===(s=p[n])||void 0===s?void 0:s.split(/`([^`]+)`/).map((n,s)=>s%2==0?n:(0,t.jsx)("code",{children:n},s)))||(0,t.jsxs)(t.Fragment,{children:["Values for the"," ",(0,t.jsx)("code",{children:n.replace(/([a-z])([A-Z])/g,(n,s,a)=>`${s}-${a.toLowerCase()}`)})," ","property"]})})]},n)})})]})})}},30196:function(n,s,a){"use strict";a.d(s,{$o:function(){return o},Vw:function(){return e},qm:function(){return p}});var t=a(85893);function e({children:n}){return(0,t.jsxs)("div",{className:"flex items-start my-6 space-x-4",children:[(0,t.jsxs)("div",{className:"relative mt-1 w-4 h-4 rounded-full bg-cyan-500 text-white flex items-center justify-center ring-2 ring-cyan-500 dark:bg-sky-500 dark:ring-sky-500",children:[(0,t.jsx)("svg",{width:"6",height:"4.5",className:"overflow-visible","aria-hidden":"true",children:(0,t.jsx)("path",{d:"M6 0L2 4.5L0 2.5",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})}),(0,t.jsx)("div",{className:"absolute top-full mt-1 left-[0.46875rem] w-px h-[1.375rem] bg-cyan-500/30 rounded-full dark:bg-sky-400/30"})]}),(0,t.jsx)("p",{className:"m-0 flex-1 text-base font-semibold text-slate-900 dark:text-slate-200",children:n})]})}function p({children:n}){return(0,t.jsxs)("div",{className:"flex items-start my-6 space-x-4",children:[(0,t.jsxs)("div",{className:"relative mt-1 w-4 h-4 rounded-full bg-rose-400 text-white flex items-center justify-center ring-2 ring-rose-400 dark:bg-red-400 dark:ring-red-400",children:[(0,t.jsx)("svg",{width:"6",height:"6",className:"overflow-visible","aria-hidden":"true",children:(0,t.jsx)("path",{d:"M0 0L6 6M6 0L0 6",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})}),(0,t.jsx)("div",{className:"absolute top-full mt-1 left-[0.46875rem] w-px h-[1.375rem] bg-rose-200 rounded-full dark:bg-red-200/25"})]}),(0,t.jsx)("p",{className:"m-0 flex-1 text-base font-semibold text-slate-900 dark:text-slate-200",children:n})]})}function o({children:n}){return(0,t.jsxs)("div",{className:"mt-6 -mb-1 flex space-x-2",children:[(0,t.jsx)("svg",{className:"flex-none w-5 h-5 text-slate-400 dark:text-slate-600",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",children:(0,t.jsx)("path",{fillRule:"evenodd",d:"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z",clipRule:"evenodd"})}),(0,t.jsx)("p",{className:"m-0 text-slate-700 text-sm font-medium dark:text-slate-200",children:n})]})}},72788:function(n,s,a){"use strict";a.d(s,{L:function(){return c}});var t=a(85893),e=a(97903),p=a(77929),o=a(87308);function c(n){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(p.Dx,{children:n.layoutProps.meta.metaTitle||n.layoutProps.meta.title}),(0,t.jsx)(e.C,{nav:o.u,...n})]})}c.nav=o.u},49808:function(n,s,a){"use strict";a.d(s,{O:function(){return O}});var t,e=a(67294),p=a(12351),o=a(19946),c=a(32984),l=a(61363),i=a(84575),r=a(16723),u=a(23784),d=a(14157),k=a(3855),h=a(46045);function g({onFocus:n}){let[s,a]=(0,e.useState)(!0);return s?e.createElement(h._,{as:"button",type:"button",features:h.A.Focusable,onFocus:s=>{s.preventDefault();let t,e=50;t=requestAnimationFrame(function s(){if(e--<=0){t&&cancelAnimationFrame(t);return}if(n()){a(!1),cancelAnimationFrame(t);return}t=requestAnimationFrame(s)})}}):null}var x=a(73781),m=a(81021),j=((t=j||{})[t.SetSelectedIndex=0]="SetSelectedIndex",t[t.RegisterTab=1]="RegisterTab",t[t.UnregisterTab=2]="UnregisterTab",t[t.RegisterPanel=3]="RegisterPanel",t[t.UnregisterPanel=4]="UnregisterPanel",t);let f={0(n,s){let a=n.tabs.filter(n=>{var s;return!(null!=(s=n.current)&&s.hasAttribute("disabled"))});if(s.index<0)return{...n,selectedIndex:n.tabs.indexOf(a[0])};if(s.index>n.tabs.length)return{...n,selectedIndex:n.tabs.indexOf(a[a.length-1])};let t=n.tabs.slice(0,s.index),e=[...n.tabs.slice(s.index),...t].find(n=>a.includes(n));return e?{...n,selectedIndex:n.tabs.indexOf(e)}:n},1(n,s){var a;if(n.tabs.includes(s.tab))return n;let t=n.tabs[n.selectedIndex],e=(0,i.z2)([...n.tabs,s.tab],n=>n.current),p=null!=(a=e.indexOf(t))?a:n.selectedIndex;return -1===p&&(p=n.selectedIndex),{...n,tabs:e,selectedIndex:p}},2:(n,s)=>({...n,tabs:n.tabs.filter(n=>n!==s.tab)}),3:(n,s)=>n.panels.includes(s.panel)?n:{...n,panels:(0,i.z2)([...n.panels,s.panel],n=>n.current)},4:(n,s)=>({...n,panels:n.panels.filter(n=>n!==s.panel)})},y=(0,e.createContext)(null);function b(n){let s=(0,e.useContext)(y);if(null===s){let s=Error(`<${n} /> is missing a parent <Tab.Group /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(s,b),s}return s}y.displayName="TabsSSRContext";let w=(0,e.createContext)(null);function v(n){let s=(0,e.useContext)(w);if(null===s){let s=Error(`<${n} /> is missing a parent <Tab.Group /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(s,v),s}return s}w.displayName="TabsDataContext";let T=(0,e.createContext)(null);function S(n){let s=(0,e.useContext)(T);if(null===s){let s=Error(`<${n} /> is missing a parent <Tab.Group /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(s,S),s}return s}function C(n,s){return(0,c.E)(s.type,f,n,s)}T.displayName="TabsActionsContext";let I=e.Fragment,L=(0,p.yV)(function(n,s){let{defaultIndex:a=0,vertical:t=!1,manual:o=!1,onChange:c,selectedIndex:l=null,...i}=n,d=t?"vertical":"horizontal",h=o?"manual":"auto",x=null!==l,m=(0,u.T)(s),[j,f]=(0,e.useReducer)(C,{selectedIndex:null!=l?l:a,tabs:[],panels:[]}),b=(0,e.useMemo)(()=>({selectedIndex:j.selectedIndex}),[j.selectedIndex]),v=(0,k.E)(c||(()=>{})),S=(0,k.E)(j.tabs),L=(0,e.useMemo)(()=>({orientation:d,activation:h,...j}),[d,h,j]),N=(0,k.E)(x?n.selectedIndex:j.selectedIndex),M=(0,e.useMemo)(()=>({registerTab:n=>(f({type:1,tab:n}),()=>f({type:2,tab:n})),registerPanel:n=>(f({type:3,panel:n}),()=>f({type:4,panel:n})),change(n){N.current!==n&&v.current(n),x||f({type:0,index:n})}}),[f,x]);(0,r.e)(()=>{f({type:0,index:null!=l?l:a})},[l]);let P=(0,e.useRef)({tabs:[],panels:[]});return e.createElement(y.Provider,{value:P},e.createElement(T.Provider,{value:M},e.createElement(w.Provider,{value:L},L.tabs.length<=0&&e.createElement(g,{onFocus:()=>{var n,s;for(let a of S.current)if((null==(n=a.current)?void 0:n.tabIndex)===0)return null==(s=a.current)||s.focus(),!0;return!1}}),(0,p.sY)({ourProps:{ref:m},theirProps:i,slot:b,defaultTag:I,name:"Tabs"}))))}),N=(0,p.yV)(function(n,s){let{orientation:a,selectedIndex:t}=v("Tab.List"),e=(0,u.T)(s);return(0,p.sY)({ourProps:{ref:e,role:"tablist","aria-orientation":a},theirProps:n,slot:{selectedIndex:t},defaultTag:"div",name:"Tabs.List"})}),M=(0,p.yV)(function(n,s){var a,t;let k=`headlessui-tabs-tab-${(0,o.M)()}`,{orientation:h,activation:g,selectedIndex:j,tabs:f,panels:y}=v("Tab"),w=S("Tab"),T=b("Tab"),C=(0,e.useRef)(null),I=(0,u.T)(C,s);(0,r.e)(()=>w.registerTab(C),[w,C]);let L=T.current.tabs.indexOf(k);-1===L&&(L=T.current.tabs.push(k)-1);let N=f.indexOf(C);-1===N&&(N=L);let M=N===j,P=(0,x.z)(n=>{let s=f.map(n=>n.current).filter(Boolean);if(n.key===l.R.Space||n.key===l.R.Enter){n.preventDefault(),n.stopPropagation(),w.change(N);return}switch(n.key){case l.R.Home:case l.R.PageUp:return n.preventDefault(),n.stopPropagation(),(0,i.jA)(s,i.TO.First);case l.R.End:case l.R.PageDown:return n.preventDefault(),n.stopPropagation(),(0,i.jA)(s,i.TO.Last)}if((0,c.E)(h,{vertical:()=>n.key===l.R.ArrowUp?(0,i.jA)(s,i.TO.Previous|i.TO.WrapAround):n.key===l.R.ArrowDown?(0,i.jA)(s,i.TO.Next|i.TO.WrapAround):void 0,horizontal:()=>n.key===l.R.ArrowLeft?(0,i.jA)(s,i.TO.Previous|i.TO.WrapAround):n.key===l.R.ArrowRight?(0,i.jA)(s,i.TO.Next|i.TO.WrapAround):void 0}))return n.preventDefault()}),_=(0,x.z)(()=>{var n;null==(n=C.current)||n.focus()}),O=(0,e.useRef)(!1),E=(0,x.z)(()=>{var n;O.current||(O.current=!0,null==(n=C.current)||n.focus(),w.change(N),(0,m.Y)(()=>{O.current=!1}))}),H=(0,x.z)(n=>{n.preventDefault()}),R=(0,e.useMemo)(()=>({selected:M}),[M]),q={ref:I,onKeyDown:P,onFocus:"manual"===g?_:E,onMouseDown:H,onClick:E,id:k,role:"tab",type:(0,d.f)(n,C),"aria-controls":null==(t=null==(a=y[N])?void 0:a.current)?void 0:t.id,"aria-selected":M,tabIndex:M?0:-1};return(0,p.sY)({ourProps:q,theirProps:n,slot:R,defaultTag:"button",name:"Tabs.Tab"})}),P=(0,p.yV)(function(n,s){let{selectedIndex:a}=v("Tab.Panels"),t=(0,u.T)(s),o=(0,e.useMemo)(()=>({selectedIndex:a}),[a]);return(0,p.sY)({ourProps:{ref:t},theirProps:n,slot:o,defaultTag:"div",name:"Tabs.Panels"})}),_=p.AN.RenderStrategy|p.AN.Static,O=Object.assign(M,{Group:L,List:N,Panels:P,Panel:(0,p.yV)(function(n,s){var a,t,c,l;let{selectedIndex:i,tabs:d,panels:k}=v("Tab.Panel"),g=S("Tab.Panel"),x=b("Tab.Panel"),m=`headlessui-tabs-panel-${(0,o.M)()}`,j=(0,e.useRef)(null),f=(0,u.T)(j,s);(0,r.e)(()=>g.registerPanel(j),[g,j]);let y=x.current.panels.indexOf(m);-1===y&&(y=x.current.panels.push(m)-1);let w=k.indexOf(j);-1===w&&(w=y);let T=w===i,C=(0,e.useMemo)(()=>({selected:T}),[T]),I={ref:f,id:m,role:"tabpanel","aria-labelledby":null==(t=null==(a=d[w])?void 0:a.current)?void 0:t.id,tabIndex:T?0:-1};return T||null!=(c=n.unmount)&&!c||null!=(l=n.static)&&l?(0,p.sY)({ourProps:I,theirProps:n,slot:C,defaultTag:"div",features:_,visible:T,name:"Tabs.Panel"}):e.createElement(h._,{as:"span",...I})})})},11151:function(n,s,a){"use strict";a.d(s,{Zo:function(){return c},ah:function(){return p}});var t=a(67294);let e=t.createContext({});function p(n){let s=t.useContext(e);return t.useMemo(()=>"function"==typeof n?n(s):{...s,...n},[s,n])}let o={};function c({components:n,children:s,disableParentContext:a}){let c;return c=a?"function"==typeof n?n({}):n||o:p(n),t.createElement(e.Provider,{value:c},s)}}},function(n){n.O(0,[3430,7996,865,9495,224,7308,9774,2888,179],function(){return n(n.s=89584)}),_N_E=n.O()}]);