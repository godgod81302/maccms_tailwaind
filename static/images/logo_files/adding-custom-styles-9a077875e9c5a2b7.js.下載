(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4631],{72253:function(n,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/adding-custom-styles",function(){return a(3936)}])},3936:function(n,s,a){"use strict";a.r(s);var e=a(85893),t=a(11151),p=a(72788),o=a(36336),l=a(30196),c=a(64637);let i=p.L,r=o.X_;function u(n){let s=Object.assign({p:"p",code:"code",a:"a",hr:"hr",pre:"pre",em:"em",ul:"ul",li:"li"},(0,t.ah)(),n.components),{Heading:a,Editor:p}=s;return p||k("Editor",!0),a||k("Heading",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(s.p,{children:"使用框架时最大的挑战通常是弄清楚当你需要框架无法为你处理的事情时你应该做什么。"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Often the biggest challenge when working with a framework is figuring out what you’re supposed to do when there’s something you need that the framework doesn’t handle for you."}),"\n",(0,e.jsx)(s.p,{children:"Tailwind 从一开始就被设计成可扩展和可定制的，因此无论你在构建什么，你都不会觉得自己在与框架作斗争。"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Tailwind has been designed from the ground up to be extensible and customizable, so that no matter what you’re building you never feel like you’re fighting the framework."}),"\n",(0,e.jsx)(s.p,{children:"本指南涵盖的主题包括自定义你的设计标记、如何在必要时打破这些限制、添加你自己的自定义 CSS 以及使用插件扩展框架。"}),"\n",(0,e.jsx)(s.p,{children:"\xa5This guide covers topics like customizing your design tokens, how to break out of those constraints when necessary, adding your own custom CSS, and extending the framework with plugins."}),"\n",(0,e.jsx)("a",{id:"customizing-your-theme"}),"\n",(0,e.jsx)(a,{level:2,id:"",children:"自定义主题"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Customizing your theme"}),"\n",(0,e.jsxs)(s.p,{children:["如果你想更改调色板、间距比例、排版比例或断点等内容，请将自定义添加到 ",(0,e.jsx)(s.code,{children:"tailwind.config.js"})," 文件的 ",(0,e.jsx)(s.code,{children:"theme"})," 部分："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5If you want to change things like your color palette, spacing scale, typography scale, or breakpoints, add your customizations to the ",(0,e.jsx)(s.code,{children:"theme"})," section of your ",(0,e.jsx)(s.code,{children:"tailwind.config.js"})," file:"]}),"\n",(0,e.jsx)(p,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">screens</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">sm</span><span class="token operator">:</span> <span class="token string">\'480px\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">md</span><span class="token operator">:</span> <span class="token string">\'768px\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">lg</span><span class="token operator">:</span> <span class="token string">\'976px\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">xl</span><span class="token operator">:</span> <span class="token string">\'1440px\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">\'blue\'</span><span class="token operator">:</span> <span class="token string">\'#1fb6ff\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'pink\'</span><span class="token operator">:</span> <span class="token string">\'#ff49db\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'orange\'</span><span class="token operator">:</span> <span class="token string">\'#ff7849\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'green\'</span><span class="token operator">:</span> <span class="token string">\'#13ce66\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'gray-dark\'</span><span class="token operator">:</span> <span class="token string">\'#273444\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'gray\'</span><span class="token operator">:</span> <span class="token string">\'#8492a6\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'gray-light\'</span><span class="token operator">:</span> <span class="token string">\'#d3dce6\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">fontFamily</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">sans</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'Graphik\'</span><span class="token punctuation">,</span> <span class="token string">\'sans-serif\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">serif</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'Merriweather\'</span><span class="token punctuation">,</span> <span class="token string">\'serif\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">spacing</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">\'128\'</span><span class="token operator">:</span> <span class="token string">\'32rem\'</span><span class="token punctuation">,</span>\n        <span class="token string-property property">\'144\'</span><span class="token operator">:</span> <span class="token string">\'36rem\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">\'4xl\'</span><span class="token operator">:</span> <span class="token string">\'2rem\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,e.jsxs)(s.p,{children:["在 ",(0,e.jsx)(s.a,{href:"/docs/theme",children:"主题配置"})," 文档中了解有关自定义主题的更多信息。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Learn more about customizing your theme in the ",(0,e.jsx)(s.a,{href:"/docs/theme",children:"Theme Configuration"})," documentation."]}),"\n",(0,e.jsx)(s.hr,{}),"\n",(0,e.jsx)("a",{id:"using-arbitrary-values"}),"\n",(0,e.jsx)(a,{level:2,id:"-1",children:"使用任意值"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Using arbitrary values"}),"\n",(0,e.jsx)(s.p,{children:"虽然你通常可以使用一组受限的设计标记来构建大量精心设计的设计，但有时你需要突破这些限制以获得像素完美的东西。"}),"\n",(0,e.jsx)(s.p,{children:"\xa5While you can usually build the bulk of a well-crafted design using a constrained set of design tokens, once in a while you need to break out of those constraints to get things pixel-perfect."}),"\n",(0,e.jsxs)(s.p,{children:["当你发现自己真的需要像 ",(0,e.jsx)(s.code,{children:"top: 117px"})," 这样的东西来在正确的位置获得背景图片时，使用 Tailwind 的方括号符号来动态生成一个具有任意值的类："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5When you find yourself really needing something like ",(0,e.jsx)(s.code,{children:"top: 117px"})," to get a background image in just the right spot, use Tailwind’s square bracket notation to generate a class on the fly with any arbitrary value:"]}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top-[117px]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsxs)(s.p,{children:["这基本上类似于内联样式，主要好处是你可以将它与交互式修饰符（如 ",(0,e.jsx)(s.code,{children:"hover"}),"）和响应式修饰符（如 ",(0,e.jsx)(s.code,{children:"lg"}),"）结合使用："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5This is basically like inline styles, with the major benefit that you can combine it with interactive modifiers like ",(0,e.jsx)(s.code,{children:"hover"})," and responsive modifiers like ",(0,e.jsx)(s.code,{children:"lg"}),":"]}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top-[117px] lg:top-[344px]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsx)(s.p,{children:"这适用于框架中的所有内容，包括背景颜色、字体大小、伪元素内容等："}),"\n",(0,e.jsx)(s.p,{children:"\xa5This works for everything in the framework, including things like background colors, font sizes, pseudo-element content, and more:"}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-[#bada55] text-[22px] before:content-[\'Festivus\']<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsxs)(s.p,{children:["甚至可以使用 ",(0,e.jsxs)(s.a,{href:"/docs/functions-and-directives#theme",children:[(0,e.jsx)(s.code,{children:"theme"})," 函数"]})," 来引用 ",(0,e.jsx)(s.code,{children:"tailwind.config.js"})," 文件中的设计标记："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5It’s even possible to use the ",(0,e.jsxs)(s.a,{href:"/docs/functions-and-directives#theme",children:[(0,e.jsx)(s.code,{children:"theme"})," function"]})," to reference the design tokens in your ",(0,e.jsx)(s.code,{children:"tailwind.config.js"})," file:"]}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid grid-cols-[fit-content(theme(spacing.32))]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsxs)(s.p,{children:["当使用 CSS 变量作为任意值时，不需要将变量封装在 ",(0,e.jsx)(s.code,{children:"var(...)"})," 中 - 只需提供实际的变量名称就足够了："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5When using a CSS variable as an arbitrary value, wrapping your variable in ",(0,e.jsx)(s.code,{children:"var(...)"})," isn’t needed — just providing the actual variable name is enough:"]}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-[--my-color]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsx)("a",{id:"arbitrary-properties"}),"\n",(0,e.jsx)(a,{level:3,id:"-2",children:"任意属性"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Arbitrary properties"}),"\n",(0,e.jsx)(s.p,{children:"如果你需要使用 Tailwind 不包含开箱即用工具的 CSS 属性，你还可以使用方括号表示法来编写完全任意的 CSS："}),"\n",(0,e.jsx)(s.p,{children:"\xa5If you ever need to use a CSS property that Tailwind doesn’t include a utility for out of the box, you can also use square bracket notation to write completely arbitrary CSS:"}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[mask-type:luminance]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsx)(s.p,{children:"这真的很像内联样式，但同样的好处是你可以使用修饰符："}),"\n",(0,e.jsxs)(s.p,{children:["\xa5This is ",(0,e.jsx)(s.em,{children:"really"})," like inline styles, but again with the benefit that you can use modifiers:"]}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[mask-type:luminance] hover:[mask-type:alpha]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsx)(s.p,{children:"这对于 CSS 变量之类的东西也很有用，尤其是当它们需要在不同条件下更改时："}),"\n",(0,e.jsx)(s.p,{children:"\xa5This can be useful for things like CSS variables as well, especially when they need to change under different conditions:"}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[--scroll-offset:56px] lg:[--scroll-offset:44px]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsx)("a",{id:"arbitrary-variants"}),"\n",(0,e.jsx)(a,{level:3,id:"-3",children:"任意变体"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Arbitrary variants"}),"\n",(0,e.jsxs)(s.p,{children:["任意变体类似于任意值，但用于进行即时选择器修改，就像你可以使用内置伪类变体（如 ",(0,e.jsx)(s.code,{children:"hover:{utility}"}),"）或响应式变体（如 ",(0,e.jsx)(s.code,{children:"md:{utility}"}),"）一样，但直接在 HTML 中使用方括号表示法。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Arbitrary ",(0,e.jsx)(s.em,{children:"variants"})," are like arbitrary values but for doing on-the-fly selector modification, like you can with built-in pseudo-class variants like ",(0,e.jsx)(s.code,{children:"hover:{utility}"})," or responsive variants like ",(0,e.jsx)(s.code,{children:"md:{utility}"})," but using square bracket notation directly in your HTML."]}),"\n",(0,e.jsxs)(c.E,{children:[(0,e.jsx)(p,{filename:"HTML",code:'<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n{#each items as item}\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">lg:[&amp;:nth-child(3)]:hover:underline</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{item}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n{/each}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre>'}),(0,e.jsx)(p,{filename:"Generated CSS",code:'<pre class="language-css"><code class="language-css"><span class="token comment">/* https://media.giphy.com/media/Sd3cd0SrUKZEyWmAlM/giphy.gif */</span>\n<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">1024</span><span class="token unit">px</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.lg</span>\\:\\<span class="token attribute"><span class="token punctuation">[</span>\\&amp;\\:nth-child\\(3\\)\\<span class="token punctuation">]</span></span>\\<span class="token pseudo-class">:hover</span>\\<span class="token">:underline</span><span class="token pseudo-class">:hover</span><span class="token pseudo-class">:nth-child</span><span class="token punctuation">(</span><span class="token n-th"><span class="token number">3</span></span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n    <span class="token property">text-decoration-line</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'})]}),"\n",(0,e.jsxs)(s.p,{children:["在 ",(0,e.jsx)(s.a,{href:"/docs/hover-focus-and-other-states#using-arbitrary-variants",children:"任意变体"})," 文档中了解更多信息。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Learn more in the ",(0,e.jsx)(s.a,{href:"/docs/hover-focus-and-other-states#using-arbitrary-variants",children:"arbitrary variants"})," documentation."]}),"\n",(0,e.jsx)("a",{id:"handling-whitespace"}),"\n",(0,e.jsx)(a,{level:3,id:"-4",children:"处理空格"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Handling whitespace"}),"\n",(0,e.jsxs)(s.p,{children:["当任意值需要包含空格时，请改用下划线 (",(0,e.jsx)(s.code,{children:"_"}),")，Tailwind 会在构建时自动将其转换为空格："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5When an arbitrary value needs to contain a space, use an underscore (",(0,e.jsx)(s.code,{children:"_"}),") instead and Tailwind will automatically convert it to a space at build-time:"]}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid <span class="code-highlight bg-code-highlight">grid-cols-[1fr_500px_2fr]</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsx)(s.p,{children:"在下划线很常见但空格无效的情况下，Tailwind 将保留下划线而不是将其转换为空格，例如在 URL 中："}),"\n",(0,e.jsx)(s.p,{children:"\xa5In situations where underscores are common but spaces are invalid, Tailwind will preserve the underscore instead of converting it to a space, for example in URLs:"}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-[url(\'/what_a_rush.png\')]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsx)(s.p,{children:"在极少数情况下，你实际上需要使用下划线，但由于空格也有效而导致歧义，请使用反斜杠转义下划线，Tailwind 不会将其转换为空格："}),"\n",(0,e.jsx)(s.p,{children:"\xa5In the rare case that you actually need to use an underscore but it’s ambiguous because a space is valid as well, escape the underscore with a backslash and Tailwind won’t convert it to a space:"}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>before:content-[\'hello\\_world\']<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsxs)(s.p,{children:["如果你使用的是像 JSX 这样的东西，其中反斜杠从渲染的 HTML 中剥离，请使用 ",(0,e.jsx)(s.a,{href:"https://web.nodejs.cn/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw",children:"String.raw()"})," 这样反斜杠就不会被视为 JavaScript 转义字符："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5If you’re using something like JSX where the backslash is stripped from the rendered HTML, use ",(0,e.jsx)(s.a,{href:"https://web.nodejs.cn/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw",children:"String.raw()"})," so the backslash isn’t treated as a JavaScript escape character:"]}),"\n",(0,e.jsx)(s.pre,{className:"language-jsx",dangerouslySetInnerHTML:{__html:'<code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token known-class-name class-name">String</span><span class="token punctuation">.</span><span class="token property-access">raw</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">before:content-[\'hello\\_world\']</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n  &lt;!-- ... -->\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsx)("a",{id:"resolving-ambiguities"}),"\n",(0,e.jsx)(a,{level:3,id:"-5",children:"解决歧义"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Resolving ambiguities"}),"\n",(0,e.jsxs)(s.p,{children:["Tailwind 中的许多工具共享一个公共命名空间，但映射到不同的 CSS 属性。例如 ",(0,e.jsx)(s.code,{children:"text-lg"})," 和 ",(0,e.jsx)(s.code,{children:"text-black"})," 都共享 ",(0,e.jsx)(s.code,{children:"text-"})," 命名空间，但一个用于 ",(0,e.jsx)(s.code,{children:"font-size"}),"，另一个用于 ",(0,e.jsx)(s.code,{children:"color"}),"。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Many utilities in Tailwind share a common namespace but map to different CSS properties. For example ",(0,e.jsx)(s.code,{children:"text-lg"})," and ",(0,e.jsx)(s.code,{children:"text-black"})," both share the ",(0,e.jsx)(s.code,{children:"text-"})," namespace, but one is for ",(0,e.jsx)(s.code,{children:"font-size"})," and the other is for ",(0,e.jsx)(s.code,{children:"color"}),"."]}),"\n",(0,e.jsx)(s.p,{children:"使用任意值时，Tailwind 通常可以根据你传入的值自动处理这种歧义："}),"\n",(0,e.jsx)(s.p,{children:"\xa5When using arbitrary values, Tailwind can generally handle this ambiguity automatically based on the value you pass in:"}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token comment">&lt;!-- Will generate a font-size utility --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-[22px]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- Will generate a color utility --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-[#bada55]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsx)(s.p,{children:"有时它确实是模棱两可的，例如在使用 CSS 变量时："}),"\n",(0,e.jsx)(s.p,{children:"\xa5Sometimes it really is ambiguous though, for example when using CSS variables:"}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-[var(--my-var)]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsxs)(s.p,{children:["在这些情况下，你可以通过在值前添加 ",(0,e.jsx)(s.a,{href:"https://web.nodejs.cn/en-US/docs/Web/CSS/CSS_Types",children:"CSS 数据类型"})," 将基础类型 “hint” 为 Tailwind："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5In these situations, you can “hint” the underlying type to Tailwind by adding a ",(0,e.jsx)(s.a,{href:"https://web.nodejs.cn/en-US/docs/Web/CSS/CSS_Types",children:"CSS data type"})," before the value:"]}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token comment">&lt;!-- Will generate a font-size utility --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-[length:var(--my-var)]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- Will generate a color utility --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-[color:var(--my-var)]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsx)(s.hr,{}),"\n",(0,e.jsx)("a",{id:"using-css-and-layer"}),"\n",(0,e.jsx)(a,{level:2,id:"css-layer",children:"使用 CSS 和@layer"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Using CSS and @layer"}),"\n",(0,e.jsx)(s.p,{children:"当你需要向 Tailwind 项目添加真正自定义的 CSS 规则时，最简单的方法是将自定义 CSS 添加到你的样式表中："}),"\n",(0,e.jsx)(s.p,{children:"\xa5When you need to add truly custom CSS rules to a Tailwind project, the easiest approach is to just add the custom CSS to your stylesheet:"}),"\n",(0,e.jsx)(p,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token selector"><span class="token class">.my-custom-style</span></span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,e.jsxs)(s.p,{children:["要获得更多功能，你还可以使用 ",(0,e.jsx)(s.code,{children:"@layer"})," 指令将样式添加到 Tailwind 的 ",(0,e.jsx)(s.code,{children:"base"}),"、",(0,e.jsx)(s.code,{children:"components"})," 和 ",(0,e.jsx)(s.code,{children:"utilities"})," 层："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5For more power, you can also use the ",(0,e.jsx)(s.code,{children:"@layer"})," directive to add styles to Tailwind’s ",(0,e.jsx)(s.code,{children:"base"}),", ",(0,e.jsx)(s.code,{children:"components"}),", and ",(0,e.jsx)(s.code,{children:"utilities"})," layers:"]}),"\n",(0,e.jsx)(p,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@layer</span> components</span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.my-custom-style</span></span> <span class="token punctuation">{</span>\n    <span class="token comment">/* ... */</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,e.jsxs)("details",{className:"-mt-0 mb-6 rounded-xl border px-6 py-3 prose prose-slate open:pb-5 dark:prose-dark dark:border-slate-800",children:[(0,e.jsx)("summary",{className:"font-medium cursor-default select-none text-slate-900 dark:text-slate-200",children:"为什么 Tailwind 将样式分组为 “layers”？"}),(0,e.jsx)(s.p,{children:"在 CSS 中，当两个选择器具有相同的特异性时，样式表中规则的顺序决定了哪个声明获胜："}),(0,e.jsx)(s.p,{children:"\xa5In CSS, the order of the rules in your stylesheet decides which declaration wins when two selectors have the same specificity:"}),(0,e.jsx)(s.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token selector"><span class="token class">.btn</span></span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token color">blue</span><span class="token punctuation">;</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector"><span class="token class">.bg-black</span></span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token color">black</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code>'}}),(0,e.jsxs)(s.p,{children:["在这里，两个按钮都是黑色的，因为 ",(0,e.jsx)(s.code,{children:".bg-black"})," 在 CSS 中位于 ",(0,e.jsx)(s.code,{children:".btn"})," 之后："]}),(0,e.jsxs)(s.p,{children:["\xa5Here, both buttons will be black since ",(0,e.jsx)(s.code,{children:".bg-black"})," comes after ",(0,e.jsx)(s.code,{children:".btn"})," in the CSS:"]}),(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn bg-black<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-black btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code>'}}),(0,e.jsxs)(s.p,{children:["为了解决这个问题，Tailwind 将其生成的样式组织成三个不同的 “layers” — 这是 ",(0,e.jsx)(s.a,{href:"https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/#what-is-itcss",children:"ITCSS"})," 推广的概念。"]}),(0,e.jsxs)(s.p,{children:["\xa5To manage this, Tailwind organizes the styles it generates into three different “layers” — a concept popularized by ",(0,e.jsx)(s.a,{href:"https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/#what-is-itcss",children:"ITCSS"}),"."]}),(0,e.jsxs)(s.ul,{role:"list",children:["\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsxs)(s.p,{children:[(0,e.jsx)(s.code,{children:"base"})," 层用于重置规则或应用于纯 HTML 元素的默认样式。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5The ",(0,e.jsx)(s.code,{children:"base"})," layer is for things like reset rules or default styles applied to plain HTML elements."]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsxs)(s.p,{children:[(0,e.jsx)(s.code,{children:"components"})," 层用于你希望能够使用工具覆盖的基于类的样式。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5The ",(0,e.jsx)(s.code,{children:"components"})," layer is for class-based styles that you want to be able to override with utilities."]}),"\n"]}),"\n",(0,e.jsxs)(s.li,{children:["\n",(0,e.jsxs)(s.p,{children:[(0,e.jsx)(s.code,{children:"utilities"})," 层用于小型、单一用途的类，这些类应始终优先于任何其他样式。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5The ",(0,e.jsx)(s.code,{children:"utilities"})," layer is for small, single-purpose classes that should always take precedence over any other styles."]}),"\n"]}),"\n"]}),(0,e.jsxs)(s.p,{children:["明确这一点可以更容易地理解你的样式将如何相互交互，并且使用 ",(0,e.jsx)(s.code,{children:"@layer"})," 指令可以让你控制最终的声明顺序，同时仍然以你喜欢的任何方式组织你的实际代码。"]}),(0,e.jsxs)(s.p,{children:["\xa5Being explicit about this makes it easier to understand how your styles will interact with each other, and using the ",(0,e.jsx)(s.code,{children:"@layer"})," directive lets you control the final declaration order while still organizing your actual code in whatever way you like."]})]}),"\n",(0,e.jsxs)(s.p,{children:[(0,e.jsx)(s.code,{children:"@layer"})," 指令通过自动将样式重新定位到相应的 ",(0,e.jsx)(s.code,{children:"@tailwind"})," 指令来帮助你控制声明顺序，还可以为你自己的自定义 CSS 启用 ",(0,e.jsx)(s.a,{href:"#using-modifiers-with-custom-css",children:"modifiers"})," 和 ",(0,e.jsx)(s.a,{href:"#removing-unused-custom-css",children:"tree-shaking"})," 等功能。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5The ",(0,e.jsx)(s.code,{children:"@layer"})," directive helps you control declaration order by automatically relocating your styles to the corresponding ",(0,e.jsx)(s.code,{children:"@tailwind"})," directive, and also enables features like ",(0,e.jsx)(s.a,{href:"#using-modifiers-with-custom-css",children:"modifiers"})," and ",(0,e.jsx)(s.a,{href:"#removing-unused-custom-css",children:"tree-shaking"})," for your own custom CSS."]}),"\n",(0,e.jsx)("a",{id:"adding-base-styles"}),"\n",(0,e.jsx)(a,{level:3,id:"-6",children:"添加基本样式"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Adding base styles"}),"\n",(0,e.jsxs)(s.p,{children:["如果你只想为页面设置一些默认值（如文本颜色、背景颜色或字体系列），最简单的选择就是向 ",(0,e.jsx)(s.code,{children:"html"})," 或 ",(0,e.jsx)(s.code,{children:"body"})," 元素添加一些类："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5If you just want to set some defaults for the page (like the text color, background color, or font family), the easiest option is just adding some classes to the ",(0,e.jsx)(s.code,{children:"html"})," or ",(0,e.jsx)(s.code,{children:"body"})," elements:"]}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-gray-900 bg-gray-100 font-serif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsx)(s.p,{children:"这会将你的基本样式决策与所有其他样式一起保存在标记中，而不是将它们隐藏在单独的文件中。"}),"\n",(0,e.jsx)(s.p,{children:"\xa5This keeps your base styling decisions in your markup alongside all of your other styles, instead of hiding them in a separate file."}),"\n",(0,e.jsxs)(s.p,{children:["如果你想为特定的 HTML 元素添加自己的默认基本样式，请使用 ",(0,e.jsx)(s.code,{children:"@layer"})," 指令将这些样式添加到 Tailwind 的 ",(0,e.jsx)(s.code,{children:"base"})," 层："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5If you want to add your own default base styles for specific HTML elements, use the ",(0,e.jsx)(s.code,{children:"@layer"})," directive to add those styles to Tailwind’s ",(0,e.jsx)(s.code,{children:"base"})," layer:"]}),"\n",(0,e.jsx)(p,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@layer</span> base</span> <span class="token punctuation">{</span>\n  <span class="token selector">h1</span> <span class="token punctuation">{</span>\n    <span class="token atrule atapply"><span class="token rule">@apply</span> text-2<span class="token unit">xl</span><span class="token punctuation">;</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">h2</span> <span class="token punctuation">{</span>\n    <span class="token atrule atapply"><span class="token rule">@apply</span> text-xl<span class="token punctuation">;</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,e.jsxs)(s.p,{children:["如果要引用 ",(0,e.jsx)(s.a,{href:"/docs/theme",children:"theme"})," 中定义的任何值，请在添加自定义基本样式时使用 ",(0,e.jsx)(s.a,{href:"/docs/functions-and-directives#theme",children:(0,e.jsx)(s.code,{children:"theme"})})," 函数或 ",(0,e.jsx)(s.a,{href:"/docs/functions-and-directives#apply",children:(0,e.jsx)(s.code,{children:"@apply"})})," 指令。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Use the ",(0,e.jsx)(s.a,{href:"/docs/functions-and-directives#theme",children:(0,e.jsx)(s.code,{children:"theme"})})," function or ",(0,e.jsx)(s.a,{href:"/docs/functions-and-directives#apply",children:(0,e.jsx)(s.code,{children:"@apply"})})," directive when adding custom base styles if you want to refer to any of the values defined in your ",(0,e.jsx)(s.a,{href:"/docs/theme",children:"theme"}),"."]}),"\n",(0,e.jsx)("a",{id:"adding-component-classes"}),"\n",(0,e.jsx)(a,{level:3,id:"-7",children:"添加组件类"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Adding component classes"}),"\n",(0,e.jsxs)(s.p,{children:["将 ",(0,e.jsx)(s.code,{children:"components"})," 层用于你想要添加到你的项目中的任何更复杂的类，你仍然希望能够使用工具类覆盖这些类。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Use the ",(0,e.jsx)(s.code,{children:"components"})," layer for any more complicated classes you want to add to your project that you’d still like to be able to override with utility classes."]}),"\n",(0,e.jsxs)(s.p,{children:["传统上，这些类是 ",(0,e.jsx)(s.code,{children:"card"}),"、",(0,e.jsx)(s.code,{children:"btn"}),"、",(0,e.jsx)(s.code,{children:"badge"})," 之类的类。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Traditionally these would be classes like ",(0,e.jsx)(s.code,{children:"card"}),", ",(0,e.jsx)(s.code,{children:"btn"}),", ",(0,e.jsx)(s.code,{children:"badge"}),"\xa0— that kind of thing."]}),"\n",(0,e.jsx)(p,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@layer</span> components</span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.card</span></span> <span class="token punctuation">{</span>\n    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'colors.white\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'borderRadius.lg\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'spacing.6\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'boxShadow.xl\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,e.jsxs)(s.p,{children:["通过在 ",(0,e.jsx)(s.code,{children:"components"})," 层定义组件类，必要时仍然可以使用实用类来覆盖它们："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5By defining component classes in the ",(0,e.jsx)(s.code,{children:"components"})," layer, you can still use utility classes to override them when necessary:"]}),"\n",(0,e.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token comment">&lt;!-- Will look like a card, but with square corners --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card rounded-none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,e.jsxs)(s.p,{children:["使用 Tailwind，你可能并不像你想象的那样经常需要这些类型的类。阅读我们关于 ",(0,e.jsx)(s.a,{href:"/docs/reusing-styles",children:"重用样式"})," 的指南，了解我们的建议。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Using Tailwind you probably don’t need these types of classes as often as you think. Read our guide on ",(0,e.jsx)(s.a,{href:"/docs/reusing-styles",children:"Reusing Styles"})," for our recommendations."]}),"\n",(0,e.jsxs)(s.p,{children:[(0,e.jsx)(s.code,{children:"components"})," 层也是为你使用的任何第三方组件放置自定义样式的好地方："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5The ",(0,e.jsx)(s.code,{children:"components"})," layer is also a good place to put custom styles for any third-party components you’re using:"]}),"\n",(0,e.jsx)(p,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@layer</span> components</span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.select2-dropdown</span></span> <span class="token punctuation">{</span>\n    <span class="token atrule atapply"><span class="token rule">@apply</span> rounded-b-lg shadow-md<span class="token punctuation">;</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token selector"><span class="token class">.select2-search</span></span> <span class="token punctuation">{</span>\n    <span class="token atrule atapply"><span class="token rule">@apply</span> border border-gray-300 rounded<span class="token punctuation">;</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token selector"><span class="token class">.select2-results__group</span></span> <span class="token punctuation">{</span>\n    <span class="token atrule atapply"><span class="token rule">@apply</span> text-lg font-bold text-gray-900<span class="token punctuation">;</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,e.jsxs)(s.p,{children:["如果要引用 ",(0,e.jsx)(s.a,{href:"/docs/theme",children:"theme"})," 中定义的任何值，请在添加自定义组件样式时使用 ",(0,e.jsx)(s.a,{href:"/docs/functions-and-directives#theme",children:(0,e.jsx)(s.code,{children:"theme"})})," 函数或 ",(0,e.jsx)(s.a,{href:"/docs/functions-and-directives#apply",children:(0,e.jsx)(s.code,{children:"@apply"})})," 指令。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Use the ",(0,e.jsx)(s.a,{href:"/docs/functions-and-directives#theme",children:(0,e.jsx)(s.code,{children:"theme"})})," function or ",(0,e.jsx)(s.a,{href:"/docs/functions-and-directives#apply",children:(0,e.jsx)(s.code,{children:"@apply"})})," directive when adding custom component styles if you want to refer to any of the values defined in your ",(0,e.jsx)(s.a,{href:"/docs/theme",children:"theme"}),"."]}),"\n",(0,e.jsx)("a",{id:"adding-custom-utilities"}),"\n",(0,e.jsx)(a,{level:3,id:"-8",children:"添加自定义工具"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Adding custom utilities"}),"\n",(0,e.jsxs)(s.p,{children:["将你自己的任何自定义工具类添加到 Tailwind 的 ",(0,e.jsx)(s.code,{children:"utilities"})," 层："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Add any of your own custom utility classes to Tailwind’s ",(0,e.jsx)(s.code,{children:"utilities"})," layer:"]}),"\n",(0,e.jsx)(p,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@layer</span> utilities</span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.content-auto</span></span> <span class="token punctuation">{</span>\n    <span class="token property">content-visibility</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,e.jsx)(s.p,{children:"当你希望在项目中使用某个 CSS 功能，而 Tailwind 不包含开箱即用的工具时，这会很有用。"}),"\n",(0,e.jsx)(s.p,{children:"\xa5This can be useful when there’s a CSS feature you’d like to use in your project that Tailwind doesn’t include utilities for out of the box."}),"\n",(0,e.jsx)("a",{id:"using-modifiers-with-custom-css"}),"\n",(0,e.jsx)(a,{level:3,id:"css",children:"在自定义 CSS 中使用修饰符"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Using modifiers with custom CSS"}),"\n",(0,e.jsxs)(s.p,{children:["你使用 ",(0,e.jsx)(s.code,{children:"@layer"})," 添加到 Tailwind 的任何自定义样式都将自动支持 Tailwind 的修饰符语法，用于处理悬停状态、响应式断点、夜间模式等内容。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Any custom styles you add to Tailwind with ",(0,e.jsx)(s.code,{children:"@layer"})," will automatically support Tailwind’s modifier syntax for handling things like hover states, responsive breakpoints, dark mode, and more."]}),"\n",(0,e.jsx)(p,{filename:"CSS",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@layer</span> utilities</span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.content-auto</span></span> <span class="token punctuation">{</span>\n    <span class="token property">content-visibility</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,e.jsx)(p,{filename:"HTML",code:'<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">lg:dark:content-auto</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>'}),"\n",(0,e.jsxs)(s.p,{children:["在 ",(0,e.jsx)(s.a,{href:"/docs/hover-focus-and-other-states",children:"悬停、聚焦、以及其他状态"})," 文档中了解有关这些修饰符如何工作的更多信息。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Learn more about how these modifiers work in the ",(0,e.jsx)(s.a,{href:"/docs/hover-focus-and-other-states",children:"Hover, Focus, and Other States"})," documentation."]}),"\n",(0,e.jsx)("a",{id:"removing-unused-custom-css"}),"\n",(0,e.jsx)(a,{level:3,id:"css-1",children:"删除未使用的自定义 CSS"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Removing unused custom CSS"}),"\n",(0,e.jsxs)(s.p,{children:["你添加到 ",(0,e.jsx)(s.code,{children:"base"}),"、",(0,e.jsx)(s.code,{children:"components"})," 或 ",(0,e.jsx)(s.code,{children:"utilities"})," 层的任何自定义样式只有在你的 HTML 中实际使用这些样式时才会包含在你编译的 CSS 中。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Any custom styles you add to the ",(0,e.jsx)(s.code,{children:"base"}),", ",(0,e.jsx)(s.code,{children:"components"}),", or ",(0,e.jsx)(s.code,{children:"utilities"})," layers will only be included in your compiled CSS if those styles are actually used in your HTML."]}),"\n",(0,e.jsx)(p,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@layer</span> components</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* This won\'t be included in your compiled CSS unless you actually use it */</span>\n  <span class="token selector"><span class="token class">.card</span></span> <span class="token punctuation">{</span>\n    <span class="token comment">/* ... */</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,e.jsxs)(s.p,{children:["如果你想添加一些应该始终包含的自定义 CSS，请将其添加到你的样式表中而不使用 ",(0,e.jsx)(s.code,{children:"@layer"})," 指令："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5If you want to add some custom CSS that should always be included, add it to your stylesheet without using the ",(0,e.jsx)(s.code,{children:"@layer"})," directive:"]}),"\n",(0,e.jsx)(p,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n\n<span class="token comment">/* This will always be included in your compiled CSS */</span>\n<span class="token selector"><span class="token class">.card</span></span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span></code></pre>'}),"\n",(0,e.jsxs)(s.p,{children:["确保将你的自定义样式放在它们需要去的地方以获得你想要的优先行为。在上面的示例中，我们在 ",(0,e.jsx)(s.code,{children:"@tailwind utilities"})," 之前添加了 ",(0,e.jsx)(s.code,{children:".card"})," 类，以确保工具仍然可以覆盖它。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Make sure to put your custom styles where they need to go to get the precedence behavior you want. In the example above, we’ve added the ",(0,e.jsx)(s.code,{children:".card"})," class before ",(0,e.jsx)(s.code,{children:"@tailwind utilities"})," to make sure utilities can still override it."]}),"\n",(0,e.jsx)("a",{id:"using-multiple-css-files"}),"\n",(0,e.jsx)(a,{level:3,id:"css-2",children:"使用多个 CSS 文件"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Using multiple CSS files"}),"\n",(0,e.jsxs)(s.p,{children:["如果你正在编写大量 CSS 并将其组织到多个文件中，请确保在使用 Tailwind 处理它们之前将这些文件合并到一个样式表中，否则你会看到有关在没有相应的 ",(0,e.jsx)(s.code,{children:"@tailwind"})," 指令的情况下使用 ",(0,e.jsx)(s.code,{children:"@layer"})," 的错误。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5If you are writing a lot of CSS and organizing it into multiple files, make sure those files are combined into a single stylesheet before processing them with Tailwind, or you’ll see errors about using ",(0,e.jsx)(s.code,{children:"@layer"})," without the corresponding ",(0,e.jsx)(s.code,{children:"@tailwind"})," directive."]}),"\n",(0,e.jsxs)(s.p,{children:["最简单的方法是使用 ",(0,e.jsx)(s.a,{href:"https://github.com/postcss/postcss-import",children:"postcss-import"})," 插件："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5The easiest way to do this is using the ",(0,e.jsx)(s.a,{href:"https://github.com/postcss/postcss-import",children:"postcss-import"})," plugin:"]}),"\n",(0,e.jsx)(p,{filename:"postcss.config.js",code:'<pre class="language-diff-js"><code class="language-diff-js"><span class="token language-js unchanged"><span class="token plain">module</span><span class="token punctuation">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">  </span><span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token plain"></span>\n</span><span class="token language-js inserted"><span class="token plain">    </span><span class="token string-property property">\'postcss-import\'</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">    </span><span class="token literal-property property">tailwindcss</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">    </span><span class="token literal-property property">autoprefixer</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">  </span><span class="token punctuation">}</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain"></span><span class="token punctuation">}</span>\n</span></code></pre>'}),"\n",(0,e.jsxs)(s.p,{children:["在我们的 ",(0,e.jsx)(s.a,{href:"/docs/using-with-preprocessors#build-time-imports",children:"构建时导入"})," 文档中了解更多信息。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Learn more in our ",(0,e.jsx)(s.a,{href:"/docs/using-with-preprocessors#build-time-imports",children:"build-time imports"})," documentation."]}),"\n",(0,e.jsx)("a",{id:"layers-and-per-component-css"}),"\n",(0,e.jsx)(a,{level:3,id:"css-3",children:"图层和每个组件的 CSS"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Layers and per-component CSS"}),"\n",(0,e.jsxs)(s.p,{children:["Vue 和 Svelte 等组件框架支持在每个组件文件中的 ",(0,e.jsx)(s.code,{children:"<style>"})," 块中添加每个组件的样式。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Component frameworks like Vue and Svelte support adding per-component styles within a ",(0,e.jsx)(s.code,{children:"<style>"})," block that lives in each component file."]}),"\n",(0,e.jsxs)(s.p,{children:["虽然你可以像这样在组件样式中使用 ",(0,e.jsx)(s.code,{children:"@apply"})," 和 ",(0,e.jsx)(s.code,{children:"theme"})," 等功能，但 ",(0,e.jsx)(s.code,{children:"@layer"})," 指令将不起作用，你会看到有关在没有匹配的 ",(0,e.jsx)(s.code,{children:"@tailwind"})," 指令的情况下使用 ",(0,e.jsx)(s.code,{children:"@layer"})," 的错误："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5While you can use features like ",(0,e.jsx)(s.code,{children:"@apply"})," and ",(0,e.jsx)(s.code,{children:"theme"})," inside component styles like this, the ",(0,e.jsx)(s.code,{children:"@layer"})," directive will not work and you’ll see an error about ",(0,e.jsx)(s.code,{children:"@layer"})," being used without a matching ",(0,e.jsx)(s.code,{children:"@tailwind"})," directive:"]}),"\n",(0,e.jsxs)(l.qm,{children:["不要在组件样式中使用 ",(0,e.jsx)(s.code,{children:"@layer"})]}),"\n",(0,e.jsx)(p,{filename:"Card.svelte",code:'<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token comment">/* Won\'t work because this file is processed in isolation */</span>\n  <span class="token atrule"><span class="token rule">@layer</span> components</span> <span class="token punctuation">{</span>\n    <span class="token selector">div</span> <span class="token punctuation">{</span>\n      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'colors.white\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'borderRadius.lg\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'spacing.6\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'boxShadow.xl\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>'}),"\n",(0,e.jsxs)(s.p,{children:["这是因为在幕后，像 Vue 和 Svelte 这样的框架正在独立处理每个 ",(0,e.jsx)(s.code,{children:"<style>"})," 块，并针对每个块单独运行 PostCSS 插件链。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5This is because under-the-hood, frameworks like Vue and Svelte are processing every single ",(0,e.jsx)(s.code,{children:"<style>"})," block independently, and running your PostCSS plugin chain against each one in isolation."]}),"\n",(0,e.jsxs)(s.p,{children:["这意味着如果你有 10 个组件，每个组件都有一个 ",(0,e.jsx)(s.code,{children:"<style>"})," 块，Tailwind 将单独运行 10 次，并且每次运行对其他运行的了解为零。因此，Tailwind 无法获取你在 ",(0,e.jsx)(s.code,{children:"@layer"})," 中定义的样式并将它们移动到相应的 ",(0,e.jsx)(s.code,{children:"@tailwind"})," 指令，因为据 Tailwind 所知，没有 ",(0,e.jsx)(s.code,{children:"@tailwind"})," 指令可将其移动到。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5That means if you have 10 components that each have a ",(0,e.jsx)(s.code,{children:"<style>"})," block, Tailwind is being run 10 separate times, and each run has zero knowledge about the other runs. Because of this, Tailwind can’t take the styles you define in a ",(0,e.jsx)(s.code,{children:"@layer"})," and move them to the corresponding ",(0,e.jsx)(s.code,{children:"@tailwind"})," directive, because as far as Tailwind can tell there is no ",(0,e.jsx)(s.code,{children:"@tailwind"})," directive to move it to."]}),"\n",(0,e.jsxs)(s.p,{children:["一种解决方案是在组件样式中不使用 ",(0,e.jsx)(s.code,{children:"@layer"}),"："]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5One solution to this is to simply ",(0,e.jsx)(s.em,{children:"not"})," use ",(0,e.jsx)(s.code,{children:"@layer"})," inside your component styles:"]}),"\n",(0,e.jsxs)(l.Vw,{children:["不使用 ",(0,e.jsx)(s.code,{children:"@layer"})," 添加你的样式"]}),"\n",(0,e.jsx)(p,{filename:"Card.svelte",code:'<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">div</span> <span class="token punctuation">{</span>\n    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'colors.white\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'borderRadius.lg\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'spacing.6\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'boxShadow.xl\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>'}),"\n",(0,e.jsx)(s.p,{children:"你失去了控制样式优先级的能力，但不幸的是，由于这些工具的工作方式，这完全超出了我们的控制范围。"}),"\n",(0,e.jsx)(s.p,{children:"\xa5You lose the ability to control the precedence of your styles, but unfortunately that’s totally out of our control because of how these tools work."}),"\n",(0,e.jsx)(s.p,{children:"我们的建议是，你根本不要使用这样的组件样式，而是按照其预期的使用方式使用 Tailwind - 作为单个全局样式表，你可以直接在 HTML 中使用这些类："}),"\n",(0,e.jsx)(s.p,{children:"\xa5Our recommendation is that you just don’t use component styles like this at all and instead use Tailwind the way it’s intended to be used — as a single global stylesheet where you use the classes directly in your HTML:"}),"\n",(0,e.jsx)(l.Vw,{children:"使用 Tailwind 的工具而不是组件样式"}),"\n",(0,e.jsx)(p,{filename:"Card.svelte",code:'<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-white rounded-lg p-6 shadow-xl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>'}),"\n",(0,e.jsx)(s.hr,{}),"\n",(0,e.jsx)("a",{id:"writing-plugins"}),"\n",(0,e.jsx)(a,{level:2,id:"-9",children:"编写插件"}),"\n",(0,e.jsx)(s.p,{children:"\xa5Writing plugins"}),"\n",(0,e.jsx)(s.p,{children:"你还可以使用 Tailwind 的插件系统而不是使用 CSS 文件向你的项目添加自定义样式："}),"\n",(0,e.jsx)(s.p,{children:"\xa5You can also add custom styles to your project using Tailwind’s plugin system instead of using a CSS file:"}),"\n",(0,e.jsx)(p,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss/plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> addBase<span class="token punctuation">,</span> addComponents<span class="token punctuation">,</span> addUtilities<span class="token punctuation">,</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">addBase</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token string-property property">\'h1\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'fontSize.2xl\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token string-property property">\'h2\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'fontSize.xl\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token function">addComponents</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token string-property property">\'.card\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'colors.white\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'borderRadius.lg\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'spacing.6\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">boxShadow</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'boxShadow.xl\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token function">addUtilities</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token string-property property">\'.content-auto\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">contentVisibility</span><span class="token operator">:</span> <span class="token string">\'auto\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,e.jsxs)(s.p,{children:["在 ",(0,e.jsx)(s.a,{href:"/docs/plugins",children:"插件"})," 文档中了解有关编写自己的插件的更多信息。"]}),"\n",(0,e.jsxs)(s.p,{children:["\xa5Learn more about writing your own plugins in the ",(0,e.jsx)(s.a,{href:"/docs/plugins",children:"Plugins"})," documentation."]})]})}function d(n={}){return(0,e.jsx)(r,Object.assign({},n,{children:(0,e.jsx)(u,n)}))}function k(n,s){throw Error("Expected "+(s?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}s.default=d,d.layoutProps={Layout:i,meta:{title:"添加自定义样式",description:"将你自己的自定义样式添加到 Tailwind 的最佳实践。"},slug:"adding-custom-styles",tableOfContents:[{title:"自定义主题",slug:"",children:[]},{title:"使用任意值",slug:"-1",children:[{title:"任意属性",slug:"-2",children:[]},{title:"任意变体",slug:"-3",children:[]},{title:"处理空格",slug:"-4",children:[]},{title:"解决歧义",slug:"-5",children:[]}]},{title:"使用 CSS 和@layer",slug:"css-layer",children:[{title:"添加基本样式",slug:"-6",children:[]},{title:"添加组件类",slug:"-7",children:[]},{title:"添加自定义工具",slug:"-8",children:[]},{title:"在自定义 CSS 中使用修饰符",slug:"css",children:[]},{title:"删除未使用的自定义 CSS",slug:"css-1",children:[]},{title:"使用多个 CSS 文件",slug:"css-2",children:[]},{title:"图层和每个组件的 CSS",slug:"css-3",children:[]}]},{title:"编写插件",slug:"-9",children:[]}]}},64637:function(n,s,a){"use strict";a.d(s,{E:function(){return u}});var e=a(85893),t=a(67294),p=a(49808),o=a(86010),l=a(4493);function c({className:n}){return(0,e.jsx)("div",{className:(0,o.Z)("pointer-events-none absolute inset-0",n)})}function i({children:n,selectedIndex:s,myIndex:a,marker:t}){let l=s===a,i={leading:l?null:s===a-1?"capped":"normal",trailing:l?null:s===a+1?"capped":"normal"};return(0,e.jsxs)(p.O,{className:(0,o.Z)("flex items-center relative z-10 overflow-hidden px-4 py-1 [&:not(:focus-visible)]:focus:outline-none",l?"text-sky-300":"text-slate-400"),children:[(0,e.jsx)("span",{className:"z-10",children:n}),"close"===t&&(0,e.jsx)("svg",{viewBox:"0 0 4 4",className:"ml-2.5 flex-none w-1 h-1 text-slate-500 overflow-visible",children:(0,e.jsx)("path",{d:"M-1 -1L5 5M5 -1L-1 5",fill:"none",stroke:"currentColor",strokeLinecap:"round"})}),"modified"===t&&(0,e.jsx)("div",{className:"ml-2.5 flex-none w-1 h-1 rounded-full bg-current"}),!l&&(0,e.jsx)(c,{className:(0,o.Z)("bg-slate-700/50 border-y border-slate-500/30","capped"===i.leading&&"border-l rounded-tl","capped"===i.trailing&&"border-r rounded-tr")}),"normal"===i.trailing&&(0,e.jsx)(c,{className:"inset-y-px border-r border-slate-200/5 z-20"}),l&&(0,e.jsx)(c,{className:"border-b border-b-sky-300"})]})}let r={plain:({children:n})=>(0,e.jsx)("div",{className:"not-prose bg-slate-800 rounded-xl shadow-md",children:n}),framed:({children:n,...s})=>(0,e.jsx)(l.RQ,{...s,children:(0,e.jsx)("div",{className:"not-prose bg-slate-800 rounded-tl-xl shadow-md",children:n})})};function u({children:n,style:s="plain",actions:a,...l}){let[c,u]=(0,t.useState)(0),d=r[s];return(0,e.jsx)(d,{...l,children:(0,e.jsxs)(p.O.Group,{as:"div",onChange:u,children:[(0,e.jsxs)("div",{className:"flex",children:[(0,e.jsx)(p.O.List,{className:"flex text-slate-400 text-xs leading-6 overflow-hidden rounded-tl-xl pt-2",children:n.map((n,s)=>(0,e.jsx)(i,{myIndex:s,selectedIndex:c,children:n.props.filename},n.props.filename))}),(0,e.jsx)("div",{className:"flex-auto flex pt-2 rounded-tr-xl overflow-hidden",children:(0,e.jsx)("div",{className:(0,o.Z)("flex-auto flex justify-end bg-slate-700/50 border-y border-slate-500/30 pr-4",c===n.length-1?"rounded-tl border-l":"")})}),a?(0,e.jsx)("div",{className:"absolute top-2 right-4 h-8 flex",children:a({selectedIndex:c})}):null]}),(0,e.jsx)(p.O.Panels,{className:"flex overflow-auto",children:n.map(n=>(0,e.jsx)(p.O.Panel,{className:"flex-none min-w-full p-5 text-sm leading-6 text-slate-50 ligatures-none",...n.props.code?{dangerouslySetInnerHTML:{__html:n.props.code}}:{children:n.props.children}},n.props.filename))})]})})}},30196:function(n,s,a){"use strict";a.d(s,{$o:function(){return o},Vw:function(){return t},qm:function(){return p}});var e=a(85893);function t({children:n}){return(0,e.jsxs)("div",{className:"flex items-start my-6 space-x-4",children:[(0,e.jsxs)("div",{className:"relative mt-1 w-4 h-4 rounded-full bg-cyan-500 text-white flex items-center justify-center ring-2 ring-cyan-500 dark:bg-sky-500 dark:ring-sky-500",children:[(0,e.jsx)("svg",{width:"6",height:"4.5",className:"overflow-visible","aria-hidden":"true",children:(0,e.jsx)("path",{d:"M6 0L2 4.5L0 2.5",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})}),(0,e.jsx)("div",{className:"absolute top-full mt-1 left-[0.46875rem] w-px h-[1.375rem] bg-cyan-500/30 rounded-full dark:bg-sky-400/30"})]}),(0,e.jsx)("p",{className:"m-0 flex-1 text-base font-semibold text-slate-900 dark:text-slate-200",children:n})]})}function p({children:n}){return(0,e.jsxs)("div",{className:"flex items-start my-6 space-x-4",children:[(0,e.jsxs)("div",{className:"relative mt-1 w-4 h-4 rounded-full bg-rose-400 text-white flex items-center justify-center ring-2 ring-rose-400 dark:bg-red-400 dark:ring-red-400",children:[(0,e.jsx)("svg",{width:"6",height:"6",className:"overflow-visible","aria-hidden":"true",children:(0,e.jsx)("path",{d:"M0 0L6 6M6 0L0 6",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})}),(0,e.jsx)("div",{className:"absolute top-full mt-1 left-[0.46875rem] w-px h-[1.375rem] bg-rose-200 rounded-full dark:bg-red-200/25"})]}),(0,e.jsx)("p",{className:"m-0 flex-1 text-base font-semibold text-slate-900 dark:text-slate-200",children:n})]})}function o({children:n}){return(0,e.jsxs)("div",{className:"mt-6 -mb-1 flex space-x-2",children:[(0,e.jsx)("svg",{className:"flex-none w-5 h-5 text-slate-400 dark:text-slate-600",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",children:(0,e.jsx)("path",{fillRule:"evenodd",d:"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z",clipRule:"evenodd"})}),(0,e.jsx)("p",{className:"m-0 text-slate-700 text-sm font-medium dark:text-slate-200",children:n})]})}},72788:function(n,s,a){"use strict";a.d(s,{L:function(){return l}});var e=a(85893),t=a(97903),p=a(77929),o=a(87308);function l(n){return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(p.Dx,{children:n.layoutProps.meta.metaTitle||n.layoutProps.meta.title}),(0,e.jsx)(t.C,{nav:o.u,...n})]})}l.nav=o.u},49808:function(n,s,a){"use strict";a.d(s,{O:function(){return H}});var e,t=a(67294),p=a(12351),o=a(19946),l=a(32984),c=a(61363),i=a(84575),r=a(16723),u=a(23784),d=a(14157),k=a(3855),h=a(46045);function g({onFocus:n}){let[s,a]=(0,t.useState)(!0);return s?t.createElement(h._,{as:"button",type:"button",features:h.A.Focusable,onFocus:s=>{s.preventDefault();let e,t=50;e=requestAnimationFrame(function s(){if(t--<=0){e&&cancelAnimationFrame(e);return}if(n()){a(!1),cancelAnimationFrame(e);return}e=requestAnimationFrame(s)})}}):null}var x=a(73781),m=a(81021),y=((e=y||{})[e.SetSelectedIndex=0]="SetSelectedIndex",e[e.RegisterTab=1]="RegisterTab",e[e.UnregisterTab=2]="UnregisterTab",e[e.RegisterPanel=3]="RegisterPanel",e[e.UnregisterPanel=4]="UnregisterPanel",e);let j={0(n,s){let a=n.tabs.filter(n=>{var s;return!(null!=(s=n.current)&&s.hasAttribute("disabled"))});if(s.index<0)return{...n,selectedIndex:n.tabs.indexOf(a[0])};if(s.index>n.tabs.length)return{...n,selectedIndex:n.tabs.indexOf(a[a.length-1])};let e=n.tabs.slice(0,s.index),t=[...n.tabs.slice(s.index),...e].find(n=>a.includes(n));return t?{...n,selectedIndex:n.tabs.indexOf(t)}:n},1(n,s){var a;if(n.tabs.includes(s.tab))return n;let e=n.tabs[n.selectedIndex],t=(0,i.z2)([...n.tabs,s.tab],n=>n.current),p=null!=(a=t.indexOf(e))?a:n.selectedIndex;return -1===p&&(p=n.selectedIndex),{...n,tabs:t,selectedIndex:p}},2:(n,s)=>({...n,tabs:n.tabs.filter(n=>n!==s.tab)}),3:(n,s)=>n.panels.includes(s.panel)?n:{...n,panels:(0,i.z2)([...n.panels,s.panel],n=>n.current)},4:(n,s)=>({...n,panels:n.panels.filter(n=>n!==s.panel)})},f=(0,t.createContext)(null);function b(n){let s=(0,t.useContext)(f);if(null===s){let s=Error(`<${n} /> is missing a parent <Tab.Group /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(s,b),s}return s}f.displayName="TabsSSRContext";let v=(0,t.createContext)(null);function w(n){let s=(0,t.useContext)(v);if(null===s){let s=Error(`<${n} /> is missing a parent <Tab.Group /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(s,w),s}return s}v.displayName="TabsDataContext";let S=(0,t.createContext)(null);function T(n){let s=(0,t.useContext)(S);if(null===s){let s=Error(`<${n} /> is missing a parent <Tab.Group /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(s,T),s}return s}function C(n,s){return(0,l.E)(s.type,j,n,s)}S.displayName="TabsActionsContext";let _=t.Fragment,N=(0,p.yV)(function(n,s){let{defaultIndex:a=0,vertical:e=!1,manual:o=!1,onChange:l,selectedIndex:c=null,...i}=n,d=e?"vertical":"horizontal",h=o?"manual":"auto",x=null!==c,m=(0,u.T)(s),[y,j]=(0,t.useReducer)(C,{selectedIndex:null!=c?c:a,tabs:[],panels:[]}),b=(0,t.useMemo)(()=>({selectedIndex:y.selectedIndex}),[y.selectedIndex]),w=(0,k.E)(l||(()=>{})),T=(0,k.E)(y.tabs),N=(0,t.useMemo)(()=>({orientation:d,activation:h,...y}),[d,h,y]),I=(0,k.E)(x?n.selectedIndex:y.selectedIndex),L=(0,t.useMemo)(()=>({registerTab:n=>(j({type:1,tab:n}),()=>j({type:2,tab:n})),registerPanel:n=>(j({type:3,panel:n}),()=>j({type:4,panel:n})),change(n){I.current!==n&&w.current(n),x||j({type:0,index:n})}}),[j,x]);(0,r.e)(()=>{j({type:0,index:null!=c?c:a})},[c]);let M=(0,t.useRef)({tabs:[],panels:[]});return t.createElement(f.Provider,{value:M},t.createElement(S.Provider,{value:L},t.createElement(v.Provider,{value:N},N.tabs.length<=0&&t.createElement(g,{onFocus:()=>{var n,s;for(let a of T.current)if((null==(n=a.current)?void 0:n.tabIndex)===0)return null==(s=a.current)||s.focus(),!0;return!1}}),(0,p.sY)({ourProps:{ref:m},theirProps:i,slot:b,defaultTag:_,name:"Tabs"}))))}),I=(0,p.yV)(function(n,s){let{orientation:a,selectedIndex:e}=w("Tab.List"),t=(0,u.T)(s);return(0,p.sY)({ourProps:{ref:t,role:"tablist","aria-orientation":a},theirProps:n,slot:{selectedIndex:e},defaultTag:"div",name:"Tabs.List"})}),L=(0,p.yV)(function(n,s){var a,e;let k=`headlessui-tabs-tab-${(0,o.M)()}`,{orientation:h,activation:g,selectedIndex:y,tabs:j,panels:f}=w("Tab"),v=T("Tab"),S=b("Tab"),C=(0,t.useRef)(null),_=(0,u.T)(C,s);(0,r.e)(()=>v.registerTab(C),[v,C]);let N=S.current.tabs.indexOf(k);-1===N&&(N=S.current.tabs.push(k)-1);let I=j.indexOf(C);-1===I&&(I=N);let L=I===y,M=(0,x.z)(n=>{let s=j.map(n=>n.current).filter(Boolean);if(n.key===c.R.Space||n.key===c.R.Enter){n.preventDefault(),n.stopPropagation(),v.change(I);return}switch(n.key){case c.R.Home:case c.R.PageUp:return n.preventDefault(),n.stopPropagation(),(0,i.jA)(s,i.TO.First);case c.R.End:case c.R.PageDown:return n.preventDefault(),n.stopPropagation(),(0,i.jA)(s,i.TO.Last)}if((0,l.E)(h,{vertical:()=>n.key===c.R.ArrowUp?(0,i.jA)(s,i.TO.Previous|i.TO.WrapAround):n.key===c.R.ArrowDown?(0,i.jA)(s,i.TO.Next|i.TO.WrapAround):void 0,horizontal:()=>n.key===c.R.ArrowLeft?(0,i.jA)(s,i.TO.Previous|i.TO.WrapAround):n.key===c.R.ArrowRight?(0,i.jA)(s,i.TO.Next|i.TO.WrapAround):void 0}))return n.preventDefault()}),P=(0,x.z)(()=>{var n;null==(n=C.current)||n.focus()}),H=(0,t.useRef)(!1),R=(0,x.z)(()=>{var n;H.current||(H.current=!0,null==(n=C.current)||n.focus(),v.change(I),(0,m.Y)(()=>{H.current=!1}))}),O=(0,x.z)(n=>{n.preventDefault()}),q=(0,t.useMemo)(()=>({selected:L}),[L]),z={ref:_,onKeyDown:M,onFocus:"manual"===g?P:R,onMouseDown:O,onClick:R,id:k,role:"tab",type:(0,d.f)(n,C),"aria-controls":null==(e=null==(a=f[I])?void 0:a.current)?void 0:e.id,"aria-selected":L,tabIndex:L?0:-1};return(0,p.sY)({ourProps:z,theirProps:n,slot:q,defaultTag:"button",name:"Tabs.Tab"})}),M=(0,p.yV)(function(n,s){let{selectedIndex:a}=w("Tab.Panels"),e=(0,u.T)(s),o=(0,t.useMemo)(()=>({selectedIndex:a}),[a]);return(0,p.sY)({ourProps:{ref:e},theirProps:n,slot:o,defaultTag:"div",name:"Tabs.Panels"})}),P=p.AN.RenderStrategy|p.AN.Static,H=Object.assign(L,{Group:N,List:I,Panels:M,Panel:(0,p.yV)(function(n,s){var a,e,l,c;let{selectedIndex:i,tabs:d,panels:k}=w("Tab.Panel"),g=T("Tab.Panel"),x=b("Tab.Panel"),m=`headlessui-tabs-panel-${(0,o.M)()}`,y=(0,t.useRef)(null),j=(0,u.T)(y,s);(0,r.e)(()=>g.registerPanel(y),[g,y]);let f=x.current.panels.indexOf(m);-1===f&&(f=x.current.panels.push(m)-1);let v=k.indexOf(y);-1===v&&(v=f);let S=v===i,C=(0,t.useMemo)(()=>({selected:S}),[S]),_={ref:j,id:m,role:"tabpanel","aria-labelledby":null==(e=null==(a=d[v])?void 0:a.current)?void 0:e.id,tabIndex:S?0:-1};return S||null!=(l=n.unmount)&&!l||null!=(c=n.static)&&c?(0,p.sY)({ourProps:_,theirProps:n,slot:C,defaultTag:"div",features:P,visible:S,name:"Tabs.Panel"}):t.createElement(h._,{as:"span",..._})})})},11151:function(n,s,a){"use strict";a.d(s,{Zo:function(){return l},ah:function(){return p}});var e=a(67294);let t=e.createContext({});function p(n){let s=e.useContext(t);return e.useMemo(()=>"function"==typeof n?n(s):{...s,...n},[s,n])}let o={};function l({components:n,children:s,disableParentContext:a}){let l;return l=a?"function"==typeof n?n({}):n||o:p(n),e.createElement(t.Provider,{value:l},s)}}},function(n){n.O(0,[3430,7996,9495,224,7308,9774,2888,179],function(){return n(n.s=72253)}),_N_E=n.O()}]);