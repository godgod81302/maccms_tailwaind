(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4199],{79399:function(s,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/using-with-preprocessors",function(){return a(75154)}])},75154:function(s,n,a){"use strict";a.r(n);var e=a(85893),t=a(11151),o=a(72788),p=a(36336),c=a(30196);let l=o.L,i=p.X_;function r(s){let n=Object.assign({p:"p",a:"a",strong:"strong",hr:"hr",ul:"ul",li:"li",code:"code",pre:"pre"},(0,t.ah)(),s.components),{Heading:a}=n;return a||function(s,n){throw Error("Expected "+(n?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}("Heading",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.p,{children:["由于 Tailwind 是一个 PostCSS 插件，没有什么能阻止你将它与 Sass、Less、Stylus 或其他预处理器一起使用，就像你可以与 ",(0,e.jsx)(n.a,{href:"https://github.com/postcss/autoprefixer",children:"Autoprefixer"})," 等其他 PostCSS 插件一样。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5Since Tailwind is a PostCSS plugin, there’s nothing stopping you from using it with Sass, Less, Stylus, or other preprocessors, just like you can with other PostCSS plugins like ",(0,e.jsx)(n.a,{href:"https://github.com/postcss/autoprefixer",children:"Autoprefixer"}),"."]}),"\n",(0,e.jsx)(n.p,{children:"需要注意的是，你不需要在 Tailwind 中使用预处理器 — 无论如何，你通常在 Tailwind 项目上编写很少的 CSS，因此使用预处理器并不像在编写 很多自定义 CSS。"}),"\n",(0,e.jsxs)(n.p,{children:["\xa5It’s important to note that ",(0,e.jsx)(n.strong,{children:"you don’t need to use a preprocessor with Tailwind"})," — you typically write very little CSS on a Tailwind project anyway, so using a preprocessor just isn’t as beneficial as it would be in a project where you write a lot of custom CSS."]}),"\n",(0,e.jsx)(n.p,{children:"本指南仅作为出于无法控制的原因需要将 Tailwind 与预处理器集成的人员的参考，而不是因为它是推荐的做法。"}),"\n",(0,e.jsx)(n.p,{children:"\xa5This guide only exists as a reference for people who need to integrate Tailwind with a preprocessor for reasons outside of their control, not because it is a recommended practice."}),"\n",(0,e.jsx)(n.hr,{}),"\n",(0,e.jsx)("a",{id:"using-postcss-as-your-preprocessor"}),"\n",(0,e.jsx)(a,{level:2,id:"post-css",children:"使用 PostCSS 作为预处理器"}),"\n",(0,e.jsx)(n.p,{children:"\xa5Using PostCSS as your preprocessor"}),"\n",(0,e.jsx)(n.p,{children:"如果你将 Tailwind 用于一个全新的项目并且不需要将其与任何现有的 Sass/Less/Stylus 样式表集成，你应该高度考虑依赖其他 PostCSS 插件来添加你使用的预处理器功能，而不是使用单独的 预处理器。"}),"\n",(0,e.jsx)(n.p,{children:"\xa5If you’re using Tailwind for a brand new project and don’t need to integrate it with any existing Sass/Less/Stylus stylesheets, you should highly consider relying on other PostCSS plugins to add the preprocessor features you use instead of using a separate preprocessor."}),"\n",(0,e.jsx)(n.p,{children:"这有几个好处："}),"\n",(0,e.jsx)(n.p,{children:"\xa5This has a few benefits:"}),"\n",(0,e.jsxs)(n.ul,{role:"list",children:["\n",(0,e.jsxs)(n.li,{children:["\n",(0,e.jsx)(n.p,{children:"你的构建会更快。由于你的 CSS 不必通过多种工具进行解析和处理，因此仅使用 PostCSS 即可更快地编译你的 CSS。"}),"\n",(0,e.jsxs)(n.p,{children:["\xa5",(0,e.jsx)(n.strong,{children:"Your builds will be faster"}),". Since your CSS doesn’t have to be parsed and processed by multiple tools, your CSS will compile much quicker using only PostCSS."]}),"\n"]}),"\n",(0,e.jsxs)(n.li,{children:["\n",(0,e.jsxs)(n.p,{children:["没有怪癖或解决方法。由于 Tailwind 向 CSS 添加了一些新的非标准关键字（如 ",(0,e.jsx)(n.code,{children:"@tailwind"}),"、",(0,e.jsx)(n.code,{children:"@apply"}),"、",(0,e.jsx)(n.code,{children:"theme()"})," 等），你通常不得不以烦人的、不直观的方式编写 CSS 以获得预处理器来为你提供预期的输出。只使用 PostCSS 可以避免这种情况。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5",(0,e.jsx)(n.strong,{children:"No quirks or workarounds."})," Because Tailwind adds some new non-standard keywords to CSS (like ",(0,e.jsx)(n.code,{children:"@tailwind"}),", ",(0,e.jsx)(n.code,{children:"@apply"}),", ",(0,e.jsx)(n.code,{children:"theme()"}),", etc.), you often have to write your CSS in annoying, unintuitive ways to get a preprocessor to give you the expected output. Working exclusively with PostCSS avoids this."]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(n.p,{children:["有关可用 PostCSS 插件的相当全面的列表，请参阅 ",(0,e.jsx)(n.a,{href:"https://github.com/postcss/postcss/blob/master/docs/plugins.md",children:"PostCSS GitHub 存储库"}),"，但这里有一些我们在自己的项目中使用并可以推荐的重要插件。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5For a fairly comprehensive list of available PostCSS plugins see the ",(0,e.jsx)(n.a,{href:"https://github.com/postcss/postcss/blob/master/docs/plugins.md",children:"PostCSS GitHub repository"}),", but here are a few important ones we use on our own projects and can recommend."]}),"\n",(0,e.jsx)("a",{id:"build-time-imports"}),"\n",(0,e.jsx)(a,{level:3,id:"",children:"构建时导入"}),"\n",(0,e.jsx)(n.p,{children:"\xa5Build-time imports"}),"\n",(0,e.jsxs)(n.p,{children:["预处理器提供的最有用的功能之一是能够将 CSS 组织到多个文件中，并在构建时通过提前处理 ",(0,e.jsx)(n.code,{children:"@import"})," 语句而不是在浏览器中将它们组合起来。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5One of the most useful features preprocessors offer is the ability to organize your CSS into multiple files and combine them at build time by processing ",(0,e.jsx)(n.code,{children:"@import"})," statements in advance, instead of in the browser."]}),"\n",(0,e.jsxs)(n.p,{children:["使用 PostCSS 处理此问题的规范插件是 ",(0,e.jsx)(n.a,{href:"https://github.com/postcss/postcss-import",children:"postcss-import"}),"。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5The canonical plugin for handling this with PostCSS is ",(0,e.jsx)(n.a,{href:"https://github.com/postcss/postcss-import",children:"postcss-import"}),"."]}),"\n",(0,e.jsx)(n.p,{children:"要使用它，请通过 npm 安装插件："}),"\n",(0,e.jsx)(n.p,{children:"\xa5To use it, install the plugin via npm:"}),"\n",(0,e.jsx)(n.pre,{className:"language-shell",dangerouslySetInnerHTML:{__html:'<code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> postcss-import</code>'}}),"\n",(0,e.jsx)(n.p,{children:"然后将它添加为 PostCSS 配置中的第一个插件："}),"\n",(0,e.jsx)(n.p,{children:"\xa5Then add it as the very first plugin in your PostCSS configuration:"}),"\n",(0,e.jsx)(n.pre,{className:"language-js",dangerouslySetInnerHTML:{__html:'<code class="language-js"><span class="token comment">// postcss.config.js</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">\'postcss-import\'</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">tailwindcss</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">autoprefixer</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsxs)(n.p,{children:["关于 ",(0,e.jsx)(n.code,{children:"postcss-import"})," 需要注意的一件重要事情是它严格遵守 CSS 规范并且不允许在文件的最顶部以外的任何地方使用 ",(0,e.jsx)(n.code,{children:"@import"})," 语句。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5One important thing to note about ",(0,e.jsx)(n.code,{children:"postcss-import"})," is that it strictly adheres to the CSS spec and disallows ",(0,e.jsx)(n.code,{children:"@import"})," statements anywhere except at the very top of a file."]}),"\n",(0,e.jsxs)(c.qm,{children:["行不通，",(0,e.jsx)(n.code,{children:"@import"})," 语句必须放在第一位"]}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token comment">/* components.css */</span>\n\n<span class="token selector"><span class="token class">.btn</span></span> <span class="token punctuation">{</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'spacing.4\'</span><span class="token punctuation">)</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'spacing.2\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* Will not work */</span>\n<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"./components/card"</span><span class="token punctuation">;</span></span></code>'}}),"\n",(0,e.jsx)(n.p,{children:"这个问题最简单的解决方案是永远不要在同一个文件中混合使用常规 CSS 和导入。相反，为你的导入创建一个主要的入口点文件，并将所有实际的 CSS 保存在单独的文件中。"}),"\n",(0,e.jsx)(n.p,{children:"\xa5The easiest solution to this problem is to never mix regular CSS and imports in the same file. Instead, create one main entry-point file for your imports, and keep all of your actual CSS in separate files."}),"\n",(0,e.jsx)(c.Vw,{children:"使用单独的文件进行导入和实际 CSS"}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token comment">/* components.css */</span>\n<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"./components/buttons.css"</span><span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"./components/card.css"</span><span class="token punctuation">;</span></span></code>'}}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token comment">/* components/buttons.css */</span>\n<span class="token selector"><span class="token class">.btn</span></span> <span class="token punctuation">{</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'spacing.4\'</span><span class="token punctuation">)</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'spacing.2\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token comment">/* components/card.css */</span>\n<span class="token selector"><span class="token class">.card</span></span> <span class="token punctuation">{</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'spacing.4\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsxs)(n.p,{children:["你最有可能遇到这种情况的地方是包含 ",(0,e.jsx)(n.code,{children:"@tailwind"})," 声明的主 CSS 文件。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5The place you are most likely to run into this situation is in your main CSS file that includes your ",(0,e.jsx)(n.code,{children:"@tailwind"})," declarations."]}),"\n",(0,e.jsxs)(c.qm,{children:["行不通，",(0,e.jsx)(n.code,{children:"@import"})," 语句必须放在第一位"]}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"./custom-base-styles.css"</span><span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"./custom-components.css"</span><span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"./custom-utilities.css"</span><span class="token punctuation">;</span></span></code>'}}),"\n",(0,e.jsxs)(n.p,{children:["你可以通过为每个 ",(0,e.jsx)(n.code,{children:"@tailwind"})," 声明创建单独的文件，然后将这些文件导入你的主样式表来解决这个问题。为方便起见，我们为每个开箱即用的 ",(0,e.jsx)(n.code,{children:"@tailwind"})," 声明提供单独的文件，你可以直接从 ",(0,e.jsx)(n.code,{children:"node_modules"})," 导入这些文件。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5You can solve this by creating separate files for each ",(0,e.jsx)(n.code,{children:"@tailwind"})," declaration, and then importing those files in your main stylesheet. To make this easy, we provide separate files for each ",(0,e.jsx)(n.code,{children:"@tailwind"})," declaration out of the box that you can import directly from ",(0,e.jsx)(n.code,{children:"node_modules"}),"."]}),"\n",(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.code,{children:"postcss-import"})," 插件足够智能，可以自动查找 ",(0,e.jsx)(n.code,{children:"node_modules"})," 文件夹中的文件，因此你不需要提供整个路径 - 例如 ",(0,e.jsx)(n.code,{children:'"tailwindcss/base"'})," 就足够了。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5The ",(0,e.jsx)(n.code,{children:"postcss-import"})," plugin is smart enough to look for files in the ",(0,e.jsx)(n.code,{children:"node_modules"})," folder automatically, so you don’t need to provide the entire path — ",(0,e.jsx)(n.code,{children:'"tailwindcss/base"'})," for example is enough."]}),"\n",(0,e.jsx)(c.Vw,{children:"导入我们提供的 CSS 文件"}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"tailwindcss/base"</span><span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"./custom-base-styles.css"</span><span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"tailwindcss/components"</span><span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"./custom-components.css"</span><span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"tailwindcss/utilities"</span><span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"./custom-utilities.css"</span><span class="token punctuation">;</span></span></code>'}}),"\n",(0,e.jsx)("a",{id:"nesting"}),"\n",(0,e.jsx)(a,{level:3,id:"-1",children:"嵌套"}),"\n",(0,e.jsx)(n.p,{children:"\xa5Nesting"}),"\n",(0,e.jsxs)(n.p,{children:["为了添加对嵌套声明的支持，我们推荐我们打包的 ",(0,e.jsx)(n.code,{children:"tailwindcss/nesting"})," 插件，它是一个 PostCSS 插件，它封装 ",(0,e.jsx)(n.a,{href:"https://github.com/postcss/postcss-nested",children:"postcss-nested"})," 或 ",(0,e.jsx)(n.a,{href:"https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-nesting",children:"postcss-nesting"})," 并充当兼容层，以确保你选择的嵌套插件正确理解 Tailwind 的自定义语法。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5To add support for nested declarations, we recommend our bundled ",(0,e.jsx)(n.code,{children:"tailwindcss/nesting"})," plugin, which is a PostCSS plugin that wraps ",(0,e.jsx)(n.a,{href:"https://github.com/postcss/postcss-nested",children:"postcss-nested"})," or ",(0,e.jsx)(n.a,{href:"https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-nesting",children:"postcss-nesting"})," and acts as a compatibility layer to make sure your nesting plugin of choice properly understands Tailwind’s custom syntax."]}),"\n",(0,e.jsxs)(n.p,{children:["它直接包含在 ",(0,e.jsx)(n.code,{children:"tailwindcss"})," 包本身中，所以要使用它，你需要做的就是将它添加到你的 PostCSS 配置中，在 Tailwind 之前的某个地方："]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5It’s included directly in the ",(0,e.jsx)(n.code,{children:"tailwindcss"})," package itself, so to use it all you need to do is add it to your PostCSS configuration, somewhere before Tailwind:"]}),"\n",(0,e.jsx)(n.pre,{className:"language-js",dangerouslySetInnerHTML:{__html:'<code class="language-js"><span class="token comment">// postcss.config.js</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">\'postcss-import\'</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string-property property">\'tailwindcss/nesting\'</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">tailwindcss</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">autoprefixer</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsxs)(n.p,{children:["默认情况下，它使用引擎盖下的 ",(0,e.jsx)(n.a,{href:"https://github.com/postcss/postcss-nested",children:"postcss-nested"})," 插件，它使用类似 Sass 的语法，是支持 ",(0,e.jsx)(n.a,{href:"/docs/plugins#css-in-js-syntax",children:"Tailwind CSS 插件 API"})," 中嵌套的插件。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5By default, it uses the ",(0,e.jsx)(n.a,{href:"https://github.com/postcss/postcss-nested",children:"postcss-nested"})," plugin under the hood, which uses a Sass-like syntax and is the plugin that powers nesting support in the ",(0,e.jsx)(n.a,{href:"/docs/plugins#css-in-js-syntax",children:"Tailwind CSS plugin API"}),"."]}),"\n",(0,e.jsxs)(n.p,{children:["如果你更愿意使用 ",(0,e.jsx)(n.a,{href:"https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-nesting",children:"postcss-nesting"}),"（基于标准 ",(0,e.jsx)(n.a,{href:"https://drafts.csswg.org/css-nesting-1/",children:"CSS 嵌套"})," 规范），请首先安装插件："]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5If you’d rather use ",(0,e.jsx)(n.a,{href:"https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-nesting",children:"postcss-nesting"})," (which is based on the standard ",(0,e.jsx)(n.a,{href:"https://drafts.csswg.org/css-nesting-1/",children:"CSS Nesting"})," specification), first install the plugin:"]}),"\n",(0,e.jsx)(n.pre,{className:"language-shell",dangerouslySetInnerHTML:{__html:'<code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> postcss-nesting</code>'}}),"\n",(0,e.jsxs)(n.p,{children:["然后将插件本身作为参数传递给 PostCSS 配置中的 ",(0,e.jsx)(n.code,{children:"tailwindcss/nesting"}),"："]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5Then pass the plugin itself as an argument to ",(0,e.jsx)(n.code,{children:"tailwindcss/nesting"})," in your PostCSS configuration:"]}),"\n",(0,e.jsx)(n.pre,{className:"language-js",dangerouslySetInnerHTML:{__html:'<code class="language-js"><span class="token comment">// postcss.config.js</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">\'postcss-import\'</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string-property property">\'tailwindcss/nesting\'</span><span class="token operator">:</span> <span class="token string">\'postcss-nesting\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">tailwindcss</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">autoprefixer</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsxs)(n.p,{children:["如果出于某种原因你需要使用非常特定的 ",(0,e.jsx)(n.code,{children:"postcss-nested"})," 版本并且想要覆盖我们与 ",(0,e.jsx)(n.code,{children:"tailwindcss/nesting"})," 本身打包在一起的版本，这也会很有帮助。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5This can also be helpful if for whatever reason you need to use a very specific version of ",(0,e.jsx)(n.code,{children:"postcss-nested"})," and want to override the version we bundle with ",(0,e.jsx)(n.code,{children:"tailwindcss/nesting"})," itself."]}),"\n",(0,e.jsxs)(n.p,{children:["请注意，如果你在项目中使用 ",(0,e.jsx)(n.a,{href:"https://github.com/csstools/postcss-plugins/tree/main/plugin-packs/postcss-preset-env",children:(0,e.jsx)(n.code,{children:"postcss-preset-env"})}),"，则应确保禁用嵌套并让 ",(0,e.jsx)(n.code,{children:"tailwindcss/nesting"})," 为你处理："]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5Note that if you are using ",(0,e.jsx)(n.a,{href:"https://github.com/csstools/postcss-plugins/tree/main/plugin-packs/postcss-preset-env",children:(0,e.jsx)(n.code,{children:"postcss-preset-env"})})," in your project, you should make sure to disable nesting and let ",(0,e.jsx)(n.code,{children:"tailwindcss/nesting"})," handle it for you instead:"]}),"\n",(0,e.jsx)(n.pre,{className:"language-js",dangerouslySetInnerHTML:{__html:'<code class="language-js"><span class="token comment">// postcss.config.js</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">\'postcss-import\'</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string-property property">\'tailwindcss/nesting\'</span><span class="token operator">:</span> <span class="token string">\'postcss-nesting\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">tailwindcss</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string-property property">\'postcss-preset-env\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">features</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">\'nesting-rules\'</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsx)("a",{id:"variables"}),"\n",(0,e.jsx)(a,{level:3,id:"-2",children:"变量"}),"\n",(0,e.jsx)(n.p,{children:"\xa5Variables"}),"\n",(0,e.jsxs)(n.p,{children:["现在 CSS 变量（正式名称为自定义属性）具有非常好的 ",(0,e.jsx)(n.a,{href:"https://caniuse.com/#search=css%20custom%20properties",children:"浏览器支持"}),"，因此你根本不需要预处理器即可使用变量。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5These days CSS variables (officially known as custom properties) have really good ",(0,e.jsx)(n.a,{href:"https://caniuse.com/#search=css%20custom%20properties",children:"browser support"}),", so you don’t need a preprocessor to use variables at all."]}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token selector"><span class="token pseudo-class">:root</span></span> <span class="token punctuation">{</span>\n  <span class="token variable">--theme-color</span><span class="token punctuation">:</span> <span class="token hexcode color">#52b3d0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* ... */</span>\n\n<span class="token selector"><span class="token class">.btn</span></span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span><span class="token variable">--theme-color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsx)(n.p,{children:"我们在 Tailwind 本身内部广泛使用 CSS 变量，因此如果你可以使用 Tailwind，则可以使用原生 CSS 变量。"}),"\n",(0,e.jsx)(n.p,{children:"\xa5We use CSS variables extensively within Tailwind itself, so if you can use Tailwind, you can use native CSS variables."}),"\n",(0,e.jsxs)(n.p,{children:["你可能还会发现，你过去使用变量的大部分事情都可以用 Tailwind 的 ",(0,e.jsx)(n.code,{children:"theme()"})," 函数代替，它使你可以直接在 CSS 中访问 ",(0,e.jsx)(n.code,{children:"tailwind.config.js"})," 文件中的所有设计标记："]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5You may also find that most of the things you’ve used variables for in the past can be replaced with Tailwind’s ",(0,e.jsx)(n.code,{children:"theme()"})," function, which gives you access to all of your design tokens from your ",(0,e.jsx)(n.code,{children:"tailwind.config.js"})," file directly in your CSS:"]}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token selector"><span class="token class">.btn</span></span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'colors.blue.500\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'spacing.2\'</span><span class="token punctuation">)</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'spacing.4\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsxs)(n.p,{children:["了解有关 ",(0,e.jsx)(n.a,{href:"/docs/functions-and-directives#theme",children:"函数和指令文档"})," 中 ",(0,e.jsx)(n.code,{children:"theme()"})," 功能的更多信息。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5Learn more about the ",(0,e.jsx)(n.code,{children:"theme()"})," function in our ",(0,e.jsx)(n.a,{href:"/docs/functions-and-directives#theme",children:"functions and directives documentation"}),"."]}),"\n",(0,e.jsx)("a",{id:"vendor-prefixes"}),"\n",(0,e.jsx)(a,{level:3,id:"-3",children:"浏览器前缀"}),"\n",(0,e.jsx)(n.p,{children:"\xa5Vendor prefixes"}),"\n",(0,e.jsxs)(n.p,{children:["要自动管理 CSS 中的浏览器前缀，你应该使用 ",(0,e.jsx)(n.a,{href:"https://github.com/postcss/autoprefixer",children:"Autoprefixer"}),"。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5For automatically managing vendor prefixes in your CSS, you should use ",(0,e.jsx)(n.a,{href:"https://github.com/postcss/autoprefixer",children:"Autoprefixer"}),"."]}),"\n",(0,e.jsx)(n.p,{children:"要使用它，请通过 npm 安装它："}),"\n",(0,e.jsx)(n.p,{children:"\xa5To use it, install it via npm:"}),"\n",(0,e.jsx)(n.pre,{className:"language-shell",dangerouslySetInnerHTML:{__html:'<code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> autoprefixer</code>'}}),"\n",(0,e.jsx)(n.p,{children:"然后将它添加到 PostCSS 配置中插件列表的最后："}),"\n",(0,e.jsx)(n.p,{children:"\xa5Then add it to the very end of your plugin list in your PostCSS configuration:"}),"\n",(0,e.jsx)(n.pre,{className:"language-js",dangerouslySetInnerHTML:{__html:'<code class="language-js">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">tailwindcss</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">autoprefixer</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsx)(n.hr,{}),"\n",(0,e.jsx)("a",{id:"using-sass-less-or-stylus"}),"\n",(0,e.jsx)(a,{level:2,id:"sass-less-stylus",children:"使用 Sass、Less 或 Stylus"}),"\n",(0,e.jsx)(n.p,{children:"\xa5Using Sass, Less, or Stylus"}),"\n",(0,e.jsxs)(n.p,{children:["为了获得最佳的开发体验，我们强烈建议你 ",(0,e.jsx)(n.a,{href:"#using-post-css-as-your-preprocessor",children:"专门使用 PostCSS"}),"，并且不要在 Tailwind 项目中使用 Sass 或 Less 等预处理器。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5For the best development experience, we highly recommend that you ",(0,e.jsx)(n.a,{href:"#using-post-css-as-your-preprocessor",children:"use PostCSS exclusively"}),", and that you don’t use preprocessors like Sass or Less in your Tailwind projects."]}),"\n",(0,e.jsx)(n.p,{children:"要将 Tailwind 与 Sass、Less 或 Stylus 等预处理工具结合使用，你需要向项目添加一个额外的构建步骤，以允许你通过 PostCSS 运行预处理的 CSS。如果你在项目中使用 Autoprefixer，那么你已经设置了类似的东西。"}),"\n",(0,e.jsx)(n.p,{children:"\xa5To use Tailwind with a preprocessing tool like Sass, Less, or Stylus, you’ll need to add an additional build step to your project that lets you run your preprocessed CSS through PostCSS. If you’re using Autoprefixer in your project, you already have something like this set up."}),"\n",(0,e.jsxs)(n.p,{children:["请参阅我们关于 ",(0,e.jsx)(n.a,{href:"/docs/installation/using-postcss",children:"将 Tailwind 安装为 PostCSS 插件"})," 的文档，了解有关将 Tailwind 集成到现有构建过程中的更多信息。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5See our documentation on ",(0,e.jsx)(n.a,{href:"/docs/installation/using-postcss",children:"installing Tailwind as a PostCSS plugin"})," to learn more about integrating Tailwind into your existing build process."]}),"\n",(0,e.jsxs)(n.p,{children:["关于将 Tailwind 与预处理器一起使用，需要了解的最重要的一点是，Sass、Less 和 Stylus 等预处理器在 Tailwind 之前单独运行。这意味着你不能将 Tailwind 的 ",(0,e.jsx)(n.code,{children:"theme()"})," 函数的输出提供给 Sass 颜色函数，因为在你的 Sass 被编译为 CSS 并提供给 PostCSS 之前，",(0,e.jsx)(n.code,{children:"theme()"})," 函数实际上并没有被评估。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5The most important thing to understand about using Tailwind with a preprocessor is that ",(0,e.jsx)(n.strong,{children:"preprocessors like Sass, Less, and Stylus run separately, before Tailwind"}),". This means that you can’t feed output from Tailwind’s ",(0,e.jsx)(n.code,{children:"theme()"})," function into a Sass color function for example, because the ",(0,e.jsx)(n.code,{children:"theme()"})," function isn’t actually evaluated until your Sass has been compiled to CSS and fed into PostCSS."]}),"\n",(0,e.jsx)(c.qm,{children:"不行，先处理 Sass"}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token selector"><span class="token class">.alert</span></span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">darken</span><span class="token punctuation">(</span><span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'colors.red.500\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token unit">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsx)(n.p,{children:"除此之外，一些预处理器在与 Tailwind 一起使用时会出现一些问题，下面列出了解决方法。"}),"\n",(0,e.jsx)(n.p,{children:"\xa5Aside from that, some preprocessors have quirks when used with Tailwind, which are outlined with workarounds below."}),"\n",(0,e.jsx)("a",{id:"sass"}),"\n",(0,e.jsx)(a,{level:3,id:"sass",children:"Sass"}),"\n",(0,e.jsxs)(n.p,{children:["将 Tailwind 与 Sass 结合使用时，将 ",(0,e.jsx)(n.code,{children:"!important"})," 与 ",(0,e.jsx)(n.code,{children:"@apply"})," 结合使用需要使用插值才能正确编译。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5When using Tailwind with Sass, using ",(0,e.jsx)(n.code,{children:"!important"})," with ",(0,e.jsx)(n.code,{children:"@apply"})," requires you to use interpolation to compile properly."]}),"\n",(0,e.jsx)(c.qm,{children:"行不通，Sass 抗诉 !important"}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token selector"><span class="token class">.alert</span></span> <span class="token punctuation">{</span>\n  <span class="token atrule atapply"><span class="token rule">@apply</span> bg-red-500 <span class="token important">!important</span><span class="token punctuation">;</span></span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsx)(c.Vw,{children:"使用插值作为解决方法"}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token selector"><span class="token class">.alert</span></span> <span class="token punctuation">{</span>\n  <span class="token atrule atapply"><span class="token rule">@apply</span> bg-red-500 #</span><span class="token punctuation">{</span><span class="token important">!important</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsxs)(n.p,{children:["除此之外，Sass 无法使用 Tailwind 的 ",(0,e.jsx)(n.code,{children:"screen()"})," 函数，除非用括号括起来。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5In addition to this, Sass has trouble with Tailwind’s ",(0,e.jsx)(n.code,{children:"screen()"})," function unless wrapped in parentheses."]}),"\n",(0,e.jsx)(c.qm,{children:"不起作用，Sass 会产生错误"}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token function">screen</span><span class="token punctuation">(</span>md<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.foo</span></span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token color">blue</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsx)(c.Vw,{children:"将 screen() 函数括在括号中"}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token function">screen</span><span class="token punctuation">(</span>md<span class="token punctuation">)</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.foo</span></span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token color">blue</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsx)(n.p,{children:"从技术上讲，这会导致媒体查询周围出现一组额外的括号，但它仍然有效。"}),"\n",(0,e.jsx)(n.p,{children:"\xa5Technically this results in an extra set of parentheses around your media query, but it still works."}),"\n",(0,e.jsx)("a",{id:"stylus"}),"\n",(0,e.jsx)(a,{level:3,id:"stylus",children:"Stylus"}),"\n",(0,e.jsxs)(n.p,{children:["将 Tailwind 与 Stylus 结合使用时，如果不将整个 CSS 规则封装在 ",(0,e.jsx)(n.code,{children:"@css"})," 中，则无法使用 Tailwind 的 ",(0,e.jsx)(n.code,{children:"@apply"})," 功能，以便 Stylus 将其视为字面量 CSS。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5When using Tailwind with Stylus, you can’t use Tailwind’s ",(0,e.jsx)(n.code,{children:"@apply"})," feature without wrapping the entire CSS rule in ",(0,e.jsx)(n.code,{children:"@css"})," so that Stylus treats it as literal CSS."]}),"\n",(0,e.jsx)(c.qm,{children:"Stylus 抗诉 @apply 不起作用"}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token selector"><span class="token class">.card</span></span> <span class="token punctuation">{</span>\n  @apply rounded-lg bg-white p-4\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsx)(c.Vw,{children:"使用 @css 避免作为 Stylus 进行处理"}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token atrule"><span class="token rule">@css</span></span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.card</span></span> <span class="token punctuation">{</span>\n    @apply rounded-lg bg-white p-4\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsxs)(n.p,{children:["然而，这会带来巨大的成本，即你无法在 ",(0,e.jsx)(n.code,{children:"@css"})," 块内使用任何 Stylus 功能。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5This comes with a significant cost however, which is that ",(0,e.jsxs)(n.strong,{children:["you cannot use any Stylus features inside a ",(0,e.jsx)(n.code,{children:"@css"})," block"]}),"."]}),"\n",(0,e.jsxs)(n.p,{children:["另一种选择是使用 ",(0,e.jsx)(n.code,{children:"theme()"})," 函数而不是 ",(0,e.jsx)(n.code,{children:"@apply"}),"，并以长格式写出实际的 CSS 属性："]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5Another option is to use the ",(0,e.jsx)(n.code,{children:"theme()"})," function instead of ",(0,e.jsx)(n.code,{children:"@apply"}),", and write out the actual CSS properties in long form:"]}),"\n",(0,e.jsx)(c.Vw,{children:"使用 theme() 而不是 @apply"}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token selector"><span class="token class">.card</span></span> <span class="token punctuation">{</span>\n  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'borderRadius.lg\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'colors.white\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'spacing.4\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsxs)(n.p,{children:["除此之外，Stylus 在使用 Tailwind 的 ",(0,e.jsx)(n.code,{children:"screen()"})," 函数时会遇到问题，除非你使用插值并将其括在括号中。"]}),"\n",(0,e.jsxs)(n.p,{children:["\xa5In addition to this, Stylus has trouble with Tailwind’s ",(0,e.jsx)(n.code,{children:"screen()"})," function unless you use interpolation and wrap it in parentheses."]}),"\n",(0,e.jsx)(c.qm,{children:"不起作用，Stylus 会生成错误"}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token function">screen</span><span class="token punctuation">(</span>md<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.foo</span></span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token color">blue</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsx)(c.Vw,{children:"使用插值和括号作为解决方法"}),"\n",(0,e.jsx)(n.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span></span><span class="token punctuation">{</span><span class="token string">\'screen(md)\'</span><span class="token punctuation">}</span><span class="token selector"><span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.foo</span></span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token color">blue</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code>'}}),"\n",(0,e.jsx)(n.p,{children:"从技术上讲，这会导致媒体查询周围出现一组额外的括号，但它仍然有效。"}),"\n",(0,e.jsx)(n.p,{children:"\xa5Technically this results in an extra set of parentheses around your media query, but it still works."})]})}function u(s={}){return(0,e.jsx)(i,Object.assign({},s,{children:(0,e.jsx)(r,s)}))}n.default=u,u.layoutProps={Layout:l,meta:{title:"使用预处理器",description:"将 Tailwind 与常见 CSS 预处理器（如 Sass、Less 和 Stylus）结合使用的指南。"},slug:"using-with-preprocessors",tableOfContents:[{title:"使用 PostCSS 作为预处理器",slug:"post-css",children:[{title:"构建时导入",slug:"",children:[]},{title:"嵌套",slug:"-1",children:[]},{title:"变量",slug:"-2",children:[]},{title:"浏览器前缀",slug:"-3",children:[]}]},{title:"使用 Sass、Less 或 Stylus",slug:"sass-less-stylus",children:[{title:"Sass",slug:"sass",children:[]},{title:"Stylus",slug:"stylus",children:[]}]}]}},30196:function(s,n,a){"use strict";a.d(n,{$o:function(){return p},Vw:function(){return t},qm:function(){return o}});var e=a(85893);function t({children:s}){return(0,e.jsxs)("div",{className:"flex items-start my-6 space-x-4",children:[(0,e.jsxs)("div",{className:"relative mt-1 w-4 h-4 rounded-full bg-cyan-500 text-white flex items-center justify-center ring-2 ring-cyan-500 dark:bg-sky-500 dark:ring-sky-500",children:[(0,e.jsx)("svg",{width:"6",height:"4.5",className:"overflow-visible","aria-hidden":"true",children:(0,e.jsx)("path",{d:"M6 0L2 4.5L0 2.5",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})}),(0,e.jsx)("div",{className:"absolute top-full mt-1 left-[0.46875rem] w-px h-[1.375rem] bg-cyan-500/30 rounded-full dark:bg-sky-400/30"})]}),(0,e.jsx)("p",{className:"m-0 flex-1 text-base font-semibold text-slate-900 dark:text-slate-200",children:s})]})}function o({children:s}){return(0,e.jsxs)("div",{className:"flex items-start my-6 space-x-4",children:[(0,e.jsxs)("div",{className:"relative mt-1 w-4 h-4 rounded-full bg-rose-400 text-white flex items-center justify-center ring-2 ring-rose-400 dark:bg-red-400 dark:ring-red-400",children:[(0,e.jsx)("svg",{width:"6",height:"6",className:"overflow-visible","aria-hidden":"true",children:(0,e.jsx)("path",{d:"M0 0L6 6M6 0L0 6",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})}),(0,e.jsx)("div",{className:"absolute top-full mt-1 left-[0.46875rem] w-px h-[1.375rem] bg-rose-200 rounded-full dark:bg-red-200/25"})]}),(0,e.jsx)("p",{className:"m-0 flex-1 text-base font-semibold text-slate-900 dark:text-slate-200",children:s})]})}function p({children:s}){return(0,e.jsxs)("div",{className:"mt-6 -mb-1 flex space-x-2",children:[(0,e.jsx)("svg",{className:"flex-none w-5 h-5 text-slate-400 dark:text-slate-600",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",children:(0,e.jsx)("path",{fillRule:"evenodd",d:"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z",clipRule:"evenodd"})}),(0,e.jsx)("p",{className:"m-0 text-slate-700 text-sm font-medium dark:text-slate-200",children:s})]})}},72788:function(s,n,a){"use strict";a.d(n,{L:function(){return c}});var e=a(85893),t=a(97903),o=a(77929),p=a(87308);function c(s){return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(o.Dx,{children:s.layoutProps.meta.metaTitle||s.layoutProps.meta.title}),(0,e.jsx)(t.C,{nav:p.u,...s})]})}c.nav=p.u},11151:function(s,n,a){"use strict";a.d(n,{Zo:function(){return c},ah:function(){return o}});var e=a(67294);let t=e.createContext({});function o(s){let n=e.useContext(t);return e.useMemo(()=>"function"==typeof s?s(n):{...n,...s},[n,s])}let p={};function c({components:s,children:n,disableParentContext:a}){let c;return c=a?"function"==typeof s?s({}):s||p:o(s),e.createElement(t.Provider,{value:c},n)}}},function(s){s.O(0,[3430,7996,9495,224,7308,9774,2888,179],function(){return s(s.s=79399)}),_N_E=s.O()}]);